// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should accept well-formed options" 1`] = `
[
  {
    "author": "jwatson",
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "options!",
        "text": "A string that moved files",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 8,
        "index": 148,
        "line": 5,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 2,
        "index": 31,
        "line": 2,
      },
    },
    "project": "Super Secret",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should avoid creating identifers with conflicted name when there exist inner strings and string variations" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "token": "name",
          "type": 1,
        },
        {
          "singular": true,
          "token": "number",
          "type": 2,
        },
      ],
      "t": {
        "*": {
          "*": {
            "desc": "example 1",
            "text": "{name} has shared {=[number] photos} with you",
            "tokenAliases": {
              "=[number] photos": "=m2",
            },
          },
          "_1": {
            "desc": "example 1",
            "text": "{name} has shared {=a photo} with you",
            "tokenAliases": {
              "=a photo": "=m2",
            },
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 16,
        "index": 740,
        "line": 22,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 165,
        "line": 6,
      },
    },
    "project": "",
  },
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "token": "name",
          "type": 1,
        },
        {
          "singular": true,
          "token": "number",
          "type": 2,
        },
      ],
      "t": {
        "*": {
          "*": {
            "desc": "In the phrase: "{name} has shared {=[number] photos} with you"",
            "outerTokenName": "=[number] photos",
            "text": "{=[number] photos}",
            "tokenAliases": {
              "=[number] photos": "=m1",
            },
          },
          "_1": {
            "desc": "In the phrase: "{name} has shared {=a photo} with you"",
            "outerTokenName": "=a photo",
            "text": "{=a photo}",
            "tokenAliases": {
              "=a photo": "=m1",
            },
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 16,
        "index": 702,
        "line": 20,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 12,
        "index": 377,
        "line": 11,
      },
    },
    "project": "",
  },
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "token": "name",
          "type": 1,
        },
        {
          "singular": true,
          "token": "number",
          "type": 2,
        },
      ],
      "t": {
        "*": {
          "*": {
            "desc": "In the phrase: "{name} has shared {=[number] photos} with you"",
            "outerTokenName": "=[number] photos",
            "text": "{number} photos",
          },
          "_1": {
            "desc": "In the phrase: "{name} has shared {=a photo} with you"",
            "outerTokenName": "=a photo",
            "text": "a photo",
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 23,
        "index": 685,
        "line": 19,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 14,
        "index": 453,
        "line": 12,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should be able to nest within React nodes" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "nested!",
        "text": "A nested string",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 55,
        "index": 113,
        "line": 3,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 20,
        "index": 78,
        "line": 3,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should convert simple strings" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "It's simple",
        "text": "A simple string",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 124,
        "line": 7,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should deduplicate branches when fbt.enum() calls share the same key" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
      ],
      "t": {
        "groups": {
          "desc": "enums!",
          "text": "Look! Groups and groups!",
        },
        "photos": {
          "desc": "enums!",
          "text": "Look! Photos and photos!",
        },
        "videos": {
          "desc": "enums!",
          "text": "Look! Videos and videos!",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 405,
        "line": 18,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should get project from docblock" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "It's simple",
        "text": "Also simple string",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 52,
        "index": 117,
        "line": 3,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 75,
        "line": 3,
      },
    },
    "project": "dev",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle JSX fbt with multiple levels of nested strings" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
        {
          "token": "name",
          "type": 1,
        },
        {
          "singular": true,
          "token": "number",
          "type": 2,
        },
        null,
      ],
      "t": {
        "today": {
          "*": {
            "*": {
              "*": {
                "desc": "example 1",
                "text": "{=today}, {name} has shared {=[number] photos with them}",
                "tokenAliases": {
                  "=[number] photos with them": "=m4",
                  "=today": "=m0",
                },
              },
              "1": {
                "desc": "example 1",
                "text": "{=today}, {name} has shared {=[number] photos with her}",
                "tokenAliases": {
                  "=[number] photos with her": "=m4",
                  "=today": "=m0",
                },
              },
              "2": {
                "desc": "example 1",
                "text": "{=today}, {name} has shared {=[number] photos with him}",
                "tokenAliases": {
                  "=[number] photos with him": "=m4",
                  "=today": "=m0",
                },
              },
            },
            "_1": {
              "*": {
                "desc": "example 1",
                "text": "{=today}, {name} has shared {=a photo with them}",
                "tokenAliases": {
                  "=a photo with them": "=m4",
                  "=today": "=m0",
                },
              },
              "1": {
                "desc": "example 1",
                "text": "{=today}, {name} has shared {=a photo with her}",
                "tokenAliases": {
                  "=a photo with her": "=m4",
                  "=today": "=m0",
                },
              },
              "2": {
                "desc": "example 1",
                "text": "{=today}, {name} has shared {=a photo with him}",
                "tokenAliases": {
                  "=a photo with him": "=m4",
                  "=today": "=m0",
                },
              },
            },
          },
        },
        "yesterday": {
          "*": {
            "*": {
              "*": {
                "desc": "example 1",
                "text": "{=yesterday}, {name} has shared {=[number] photos with them}",
                "tokenAliases": {
                  "=[number] photos with them": "=m4",
                  "=yesterday": "=m0",
                },
              },
              "1": {
                "desc": "example 1",
                "text": "{=yesterday}, {name} has shared {=[number] photos with her}",
                "tokenAliases": {
                  "=[number] photos with her": "=m4",
                  "=yesterday": "=m0",
                },
              },
              "2": {
                "desc": "example 1",
                "text": "{=yesterday}, {name} has shared {=[number] photos with him}",
                "tokenAliases": {
                  "=[number] photos with him": "=m4",
                  "=yesterday": "=m0",
                },
              },
            },
            "_1": {
              "*": {
                "desc": "example 1",
                "text": "{=yesterday}, {name} has shared {=a photo with them}",
                "tokenAliases": {
                  "=a photo with them": "=m4",
                  "=yesterday": "=m0",
                },
              },
              "1": {
                "desc": "example 1",
                "text": "{=yesterday}, {name} has shared {=a photo with her}",
                "tokenAliases": {
                  "=a photo with her": "=m4",
                  "=yesterday": "=m0",
                },
              },
              "2": {
                "desc": "example 1",
                "text": "{=yesterday}, {name} has shared {=a photo with him}",
                "tokenAliases": {
                  "=a photo with him": "=m4",
                  "=yesterday": "=m0",
                },
              },
            },
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 12,
        "index": 718,
        "line": 23,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 6,
        "index": 64,
        "line": 3,
      },
    },
    "project": "",
  },
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
        {
          "token": "name",
          "type": 1,
        },
        {
          "singular": true,
          "token": "number",
          "type": 2,
        },
        null,
      ],
      "t": {
        "today": {
          "*": {
            "*": {
              "*": {
                "desc": "In the phrase: "{=today}, {name} has shared {=[number] photos with them}"",
                "outerTokenName": "=today",
                "text": "today",
              },
              "1": {
                "desc": "In the phrase: "{=today}, {name} has shared {=[number] photos with her}"",
                "outerTokenName": "=today",
                "text": "today",
              },
              "2": {
                "desc": "In the phrase: "{=today}, {name} has shared {=[number] photos with him}"",
                "outerTokenName": "=today",
                "text": "today",
              },
            },
            "_1": {
              "*": {
                "desc": "In the phrase: "{=today}, {name} has shared {=a photo with them}"",
                "outerTokenName": "=today",
                "text": "today",
              },
              "1": {
                "desc": "In the phrase: "{=today}, {name} has shared {=a photo with her}"",
                "outerTokenName": "=today",
                "text": "today",
              },
              "2": {
                "desc": "In the phrase: "{=today}, {name} has shared {=a photo with him}"",
                "outerTokenName": "=today",
                "text": "today",
              },
            },
          },
        },
        "yesterday": {
          "*": {
            "*": {
              "*": {
                "desc": "In the phrase: "{=yesterday}, {name} has shared {=[number] photos with them}"",
                "outerTokenName": "=yesterday",
                "text": "yesterday",
              },
              "1": {
                "desc": "In the phrase: "{=yesterday}, {name} has shared {=[number] photos with her}"",
                "outerTokenName": "=yesterday",
                "text": "yesterday",
              },
              "2": {
                "desc": "In the phrase: "{=yesterday}, {name} has shared {=[number] photos with him}"",
                "outerTokenName": "=yesterday",
                "text": "yesterday",
              },
            },
            "_1": {
              "*": {
                "desc": "In the phrase: "{=yesterday}, {name} has shared {=a photo with them}"",
                "outerTokenName": "=yesterday",
                "text": "yesterday",
              },
              "1": {
                "desc": "In the phrase: "{=yesterday}, {name} has shared {=a photo with her}"",
                "outerTokenName": "=yesterday",
                "text": "yesterday",
              },
              "2": {
                "desc": "In the phrase: "{=yesterday}, {name} has shared {=a photo with him}"",
                "outerTokenName": "=yesterday",
                "text": "yesterday",
              },
            },
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 12,
        "index": 207,
        "line": 6,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 8,
        "index": 95,
        "line": 4,
      },
    },
    "project": "",
  },
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
        {
          "token": "name",
          "type": 1,
        },
        {
          "singular": true,
          "token": "number",
          "type": 2,
        },
        null,
      ],
      "t": {
        "today": {
          "*": {
            "*": {
              "*": {
                "desc": "In the phrase: "{=today}, {name} has shared {=[number] photos with them}"",
                "outerTokenName": "=[number] photos with them",
                "text": "{number} photos with {=them}",
                "tokenAliases": {
                  "=them": "=m4",
                },
              },
              "1": {
                "desc": "In the phrase: "{=today}, {name} has shared {=[number] photos with her}"",
                "outerTokenName": "=[number] photos with her",
                "text": "{number} photos with {=her}",
                "tokenAliases": {
                  "=her": "=m4",
                },
              },
              "2": {
                "desc": "In the phrase: "{=today}, {name} has shared {=[number] photos with him}"",
                "outerTokenName": "=[number] photos with him",
                "text": "{number} photos with {=him}",
                "tokenAliases": {
                  "=him": "=m4",
                },
              },
            },
            "_1": {
              "*": {
                "desc": "In the phrase: "{=today}, {name} has shared {=a photo with them}"",
                "outerTokenName": "=a photo with them",
                "text": "a photo with {=them}",
                "tokenAliases": {
                  "=them": "=m4",
                },
              },
              "1": {
                "desc": "In the phrase: "{=today}, {name} has shared {=a photo with her}"",
                "outerTokenName": "=a photo with her",
                "text": "a photo with {=her}",
                "tokenAliases": {
                  "=her": "=m4",
                },
              },
              "2": {
                "desc": "In the phrase: "{=today}, {name} has shared {=a photo with him}"",
                "outerTokenName": "=a photo with him",
                "text": "a photo with {=him}",
                "tokenAliases": {
                  "=him": "=m4",
                },
              },
            },
          },
        },
        "yesterday": {
          "*": {
            "*": {
              "*": {
                "desc": "In the phrase: "{=yesterday}, {name} has shared {=[number] photos with them}"",
                "outerTokenName": "=[number] photos with them",
                "text": "{number} photos with {=them}",
                "tokenAliases": {
                  "=them": "=m4",
                },
              },
              "1": {
                "desc": "In the phrase: "{=yesterday}, {name} has shared {=[number] photos with her}"",
                "outerTokenName": "=[number] photos with her",
                "text": "{number} photos with {=her}",
                "tokenAliases": {
                  "=her": "=m4",
                },
              },
              "2": {
                "desc": "In the phrase: "{=yesterday}, {name} has shared {=[number] photos with him}"",
                "outerTokenName": "=[number] photos with him",
                "text": "{number} photos with {=him}",
                "tokenAliases": {
                  "=him": "=m4",
                },
              },
            },
            "_1": {
              "*": {
                "desc": "In the phrase: "{=yesterday}, {name} has shared {=a photo with them}"",
                "outerTokenName": "=a photo with them",
                "text": "a photo with {=them}",
                "tokenAliases": {
                  "=them": "=m4",
                },
              },
              "1": {
                "desc": "In the phrase: "{=yesterday}, {name} has shared {=a photo with her}"",
                "outerTokenName": "=a photo with her",
                "text": "a photo with {=her}",
                "tokenAliases": {
                  "=her": "=m4",
                },
              },
              "2": {
                "desc": "In the phrase: "{=yesterday}, {name} has shared {=a photo with him}"",
                "outerTokenName": "=a photo with him",
                "text": "a photo with {=him}",
                "tokenAliases": {
                  "=him": "=m4",
                },
              },
            },
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 12,
        "index": 705,
        "line": 22,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 8,
        "index": 362,
        "line": 11,
      },
    },
    "project": "",
  },
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
        {
          "token": "name",
          "type": 1,
        },
        {
          "singular": true,
          "token": "number",
          "type": 2,
        },
        null,
      ],
      "t": {
        "today": {
          "*": {
            "*": {
              "*": {
                "desc": "In the phrase: "{=today}, {name} has shared {number} photos with {=them}"",
                "outerTokenName": "=them",
                "text": "them",
              },
              "1": {
                "desc": "In the phrase: "{=today}, {name} has shared {number} photos with {=her}"",
                "outerTokenName": "=her",
                "text": "her",
              },
              "2": {
                "desc": "In the phrase: "{=today}, {name} has shared {number} photos with {=him}"",
                "outerTokenName": "=him",
                "text": "him",
              },
            },
            "_1": {
              "*": {
                "desc": "In the phrase: "{=today}, {name} has shared a photo with {=them}"",
                "outerTokenName": "=them",
                "text": "them",
              },
              "1": {
                "desc": "In the phrase: "{=today}, {name} has shared a photo with {=her}"",
                "outerTokenName": "=her",
                "text": "her",
              },
              "2": {
                "desc": "In the phrase: "{=today}, {name} has shared a photo with {=him}"",
                "outerTokenName": "=him",
                "text": "him",
              },
            },
          },
        },
        "yesterday": {
          "*": {
            "*": {
              "*": {
                "desc": "In the phrase: "{=yesterday}, {name} has shared {number} photos with {=them}"",
                "outerTokenName": "=them",
                "text": "them",
              },
              "1": {
                "desc": "In the phrase: "{=yesterday}, {name} has shared {number} photos with {=her}"",
                "outerTokenName": "=her",
                "text": "her",
              },
              "2": {
                "desc": "In the phrase: "{=yesterday}, {name} has shared {number} photos with {=him}"",
                "outerTokenName": "=him",
                "text": "him",
              },
            },
            "_1": {
              "*": {
                "desc": "In the phrase: "{=yesterday}, {name} has shared a photo with {=them}"",
                "outerTokenName": "=them",
                "text": "them",
              },
              "1": {
                "desc": "In the phrase: "{=yesterday}, {name} has shared a photo with {=her}"",
                "outerTokenName": "=her",
                "text": "her",
              },
              "2": {
                "desc": "In the phrase: "{=yesterday}, {name} has shared a photo with {=him}"",
                "outerTokenName": "=him",
                "text": "him",
              },
            },
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 19,
        "index": 692,
        "line": 21,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 546,
        "line": 16,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle JSX fbt with two nested React elements" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "token": "name",
          "type": 1,
        },
        {
          "singular": true,
          "token": "number",
          "type": 2,
        },
      ],
      "t": {
        "*": {
          "*": {
            "desc": "example 1",
            "text": "{name} has shared {=[number] photos} with you",
            "tokenAliases": {
              "=[number] photos": "=m2",
            },
          },
          "_1": {
            "desc": "example 1",
            "text": "{name} has shared {=a photo} with you",
            "tokenAliases": {
              "=a photo": "=m2",
            },
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 12,
        "index": 575,
        "line": 19,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 6,
        "index": 64,
        "line": 3,
      },
    },
    "project": "",
  },
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "token": "name",
          "type": 1,
        },
        {
          "singular": true,
          "token": "number",
          "type": 2,
        },
      ],
      "t": {
        "*": {
          "*": {
            "desc": "In the phrase: "{name} has shared {=[number] photos} with you"",
            "outerTokenName": "=[number] photos",
            "text": "{=[number] photos}",
            "tokenAliases": {
              "=[number] photos": "=m1",
            },
          },
          "_1": {
            "desc": "In the phrase: "{name} has shared {=a photo} with you"",
            "outerTokenName": "=a photo",
            "text": "{=a photo}",
            "tokenAliases": {
              "=a photo": "=m1",
            },
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 12,
        "index": 545,
        "line": 17,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 8,
        "index": 256,
        "line": 8,
      },
    },
    "project": "",
  },
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "token": "name",
          "type": 1,
        },
        {
          "singular": true,
          "token": "number",
          "type": 2,
        },
      ],
      "t": {
        "*": {
          "*": {
            "desc": "In the phrase: "{name} has shared {=[number] photos} with you"",
            "outerTokenName": "=[number] photos",
            "text": "{number} photos",
          },
          "_1": {
            "desc": "In the phrase: "{name} has shared {=a photo} with you"",
            "outerTokenName": "=a photo",
            "text": "a photo",
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 19,
        "index": 532,
        "line": 16,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 328,
        "line": 9,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle a JSX fragment nested with fbt.param as an argument" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "token": "__subject__",
          "type": 1,
        },
      ],
      "t": {
        "*": {
          "desc": "string with nested JSX fragments",
          "text": "A1 {=B1 C1 [paramName] C2 B2} A2",
          "tokenAliases": {
            "=B1 C1 [paramName] C2 B2": "=m1",
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 595,
        "line": 25,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 14,
        "index": 72,
        "line": 3,
      },
    },
    "project": "",
    "subject": Node {
      "end": 576,
      "innerComments": undefined,
      "leadingComments": undefined,
      "loc": SourceLocation {
        "end": Position {
          "column": 31,
          "index": 576,
          "line": 23,
        },
        "filename": undefined,
        "identifierName": "subjectValue",
        "start": Position {
          "column": 19,
          "index": 564,
          "line": 23,
        },
      },
      "name": "subjectValue",
      "start": 564,
      "trailingComments": undefined,
      "type": "Identifier",
    },
  },
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "token": "__subject__",
          "type": 1,
        },
      ],
      "t": {
        "*": {
          "desc": "In the phrase: "A1 {=B1 C1 [paramName] C2 B2} A2"",
          "outerTokenName": "=B1 C1 [paramName] C2 B2",
          "text": "B1 {=C1 [paramName] C2} B2",
          "tokenAliases": {
            "=C1 [paramName] C2": "=m1",
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 14,
        "index": 461,
        "line": 18,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 114,
        "line": 6,
      },
    },
    "project": "",
    "subject": Node {
      "end": 576,
      "innerComments": undefined,
      "leadingComments": undefined,
      "loc": SourceLocation {
        "end": Position {
          "column": 31,
          "index": 576,
          "line": 23,
        },
        "filename": undefined,
        "identifierName": "subjectValue",
        "start": Position {
          "column": 19,
          "index": 564,
          "line": 23,
        },
      },
      "name": "subjectValue",
      "start": 564,
      "trailingComments": undefined,
      "type": "Identifier",
    },
  },
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "token": "__subject__",
          "type": 1,
        },
      ],
      "t": {
        "*": {
          "desc": "In the phrase: "A1 B1 {=C1 [paramName] C2} B2 A2"",
          "outerTokenName": "=C1 [paramName] C2",
          "text": "C1 {paramName} C2",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 16,
        "index": 431,
        "line": 16,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 12,
        "index": 145,
        "line": 8,
      },
    },
    "project": "",
    "subject": Node {
      "end": 576,
      "innerComments": undefined,
      "leadingComments": undefined,
      "loc": SourceLocation {
        "end": Position {
          "column": 31,
          "index": 576,
          "line": 23,
        },
        "filename": undefined,
        "identifierName": "subjectValue",
        "start": Position {
          "column": 19,
          "index": 564,
          "line": 23,
        },
      },
      "name": "subjectValue",
      "start": 564,
      "trailingComments": undefined,
      "type": "Identifier",
    },
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle duplicate enums" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
      ],
      "t": {
        "groups": {
          "desc": "enums!",
          "text": "Look! Groups and groups!",
        },
        "photos": {
          "desc": "enums!",
          "text": "Look! Photos and photos!",
        },
        "videos": {
          "desc": "enums!",
          "text": "Look! Videos and videos!",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 414,
        "line": 19,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle enums (with array values)" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
      ],
      "t": {
        "groups": {
          "desc": "enum as an array",
          "text": "Click to see groups",
        },
        "photos": {
          "desc": "enum as an array",
          "text": "Click to see photos",
        },
        "videos": {
          "desc": "enum as an array",
          "text": "Click to see videos",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 189,
        "line": 8,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle enums (with enum range as variable)" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
      ],
      "t": {
        "id1": {
          "desc": "enum as an array",
          "text": "Click to see groups",
        },
        "id2": {
          "desc": "enum as an array",
          "text": "Click to see photos",
        },
        "id3": {
          "desc": "enum as an array",
          "text": "Click to see videos",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 204,
        "line": 9,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 14,
        "index": 82,
        "line": 3,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle enums (with value map)" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
      ],
      "t": {
        "id1": {
          "desc": "enum as an object",
          "text": "Click to see groups",
        },
        "id2": {
          "desc": "enum as an object",
          "text": "Click to see photos",
        },
        "id3": {
          "desc": "enum as an object",
          "text": "Click to see videos",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 202,
        "line": 8,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle enums with more text after" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
      ],
      "t": {
        "groups": {
          "desc": "enums!",
          "text": "Hello, groups!",
        },
        "photos": {
          "desc": "enums!",
          "text": "Hello, photos!",
        },
        "videos": {
          "desc": "enums!",
          "text": "Hello, videos!",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 180,
        "line": 8,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle multiple plurals with no showCount (i.e. no named params)" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
        {
          "singular": true,
          "token": "number",
          "type": 2,
        },
      ],
      "t": {
        "*": {
          "*": {
            "desc": "plurals",
            "text": "There are {number} likes",
          },
        },
        "_1": {
          "_1": {
            "desc": "plurals",
            "text": "There is a like",
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 232,
        "line": 8,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle names" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "token": "name",
          "type": 1,
        },
      ],
      "t": {
        "*": {
          "desc": "names",
          "text": "You just friended {name}",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 161,
        "line": 7,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle object pronoun" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
      ],
      "t": {
        "*": {
          "desc": "object pronoun",
          "text": "I know them.",
        },
        "0": {
          "desc": "object pronoun",
          "text": "I know this.",
        },
        "1": {
          "desc": "object pronoun",
          "text": "I know her.",
        },
        "2": {
          "desc": "object pronoun",
          "text": "I know him.",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 9,
        "index": 188,
        "line": 9,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle params" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "Moar params",
        "text": "A parameterized message to {personName}",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 198,
        "line": 8,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle plurals that have different count variables" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "singular": true,
          "token": "cat_token",
          "type": 2,
        },
        {
          "singular": true,
          "token": "dog_token",
          "type": 2,
        },
      ],
      "t": {
        "*": {
          "*": {
            "desc": "plurals",
            "text": "{cat_token} cats and {dog_token} dogs",
          },
          "_1": {
            "desc": "plurals",
            "text": "{cat_token} cats and 1 dog",
          },
        },
        "_1": {
          "*": {
            "desc": "plurals",
            "text": "1 cat and {dog_token} dogs",
          },
          "_1": {
            "desc": "plurals",
            "text": "1 cat and 1 dog",
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 266,
        "line": 9,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle plurals that share the same count variable" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
        {
          "singular": true,
          "token": "number",
          "type": 2,
        },
      ],
      "t": {
        "*": {
          "*": {
            "desc": "plurals",
            "text": "There were {number} likes",
          },
        },
        "_1": {
          "_1": {
            "desc": "plurals",
            "text": "There was a like",
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 259,
        "line": 9,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle possessive pronoun" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
      ],
      "t": {
        "*": {
          "desc": "possessive pronoun",
          "text": "It is their birthday.",
        },
        "1": {
          "desc": "possessive pronoun",
          "text": "It is her birthday.",
        },
        "2": {
          "desc": "possessive pronoun",
          "text": "It is his birthday.",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 9,
        "index": 194,
        "line": 8,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle subject and reflexive pronouns" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
        null,
      ],
      "t": {
        "*": {
          "*": {
            "desc": "subject+reflexive pronouns",
            "text": "They wished themselves a happy birthday.",
          },
        },
        "1": {
          "1": {
            "desc": "subject+reflexive pronouns",
            "text": "She wished herself a happy birthday.",
          },
        },
        "2": {
          "2": {
            "desc": "subject+reflexive pronouns",
            "text": "He wished himself a happy birthday.",
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 9,
        "index": 303,
        "line": 9,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle variations + same param" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "token": "count",
          "type": 2,
        },
      ],
      "t": {
        "*": {
          "desc": "test variations + sameParam",
          "text": "You have {count} likes. Comment on it to get more than {count} likes",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 296,
        "line": 11,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 6,
        "index": 51,
        "line": 3,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handle variations" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "token": "count",
          "type": 2,
        },
      ],
      "t": {
        "*": {
          "desc": "variations!",
          "text": "Click to see {count} links",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 183,
        "line": 8,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should handler wrapping parens" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "desc",
        "text": "foobarbazqux",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 155,
        "line": 9,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "desc",
        "text": "foobarbazqux",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 287,
        "line": 17,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 14,
        "index": 171,
        "line": 10,
      },
    },
    "project": "",
  },
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "desc",
        "text": "foobarbazqux",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 419,
        "line": 25,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 14,
        "index": 303,
        "line": 18,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should insert param in place of fbt.sameParam if it exists" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "d",
        "text": "{name1} and {name1}",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 166,
        "line": 8,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should maintain intra-argument newlines" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "a",
        "text": "{name1} blah {name2}",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 315,
        "line": 17,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should maintain newlines when using string templates" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "blah",
        "text": "A simple string... with some other stuff.",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 142,
        "line": 8,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should maintain newlines within arguments" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "a",
        "text": "a b {name1} c d {name2} e",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 254,
        "line": 13,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should not throw for string with a nested JSX fragment and string variation arguments" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "token": "count",
          "type": 2,
        },
        {
          "singular": true,
          "token": "cat_token",
          "type": 2,
        },
      ],
      "t": {
        "*": {
          "*": {
            "desc": "string with nested JSX fragments",
            "text": "A1 {=B1 C1 [count] C2 [cat_token] cats B2} A2",
            "tokenAliases": {
              "=B1 C1 [count] C2 [cat_token] cats B2": "=m1",
            },
          },
          "_1": {
            "desc": "string with nested JSX fragments",
            "text": "A1 {=B1 C1 [count] C2 cat B2} A2",
            "tokenAliases": {
              "=B1 C1 [count] C2 cat B2": "=m1",
            },
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 9,
        "index": 545,
        "line": 19,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 16,
        "index": 74,
        "line": 3,
      },
    },
    "project": "",
  },
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "token": "count",
          "type": 2,
        },
        {
          "singular": true,
          "token": "cat_token",
          "type": 2,
        },
      ],
      "t": {
        "*": {
          "*": {
            "desc": "In the phrase: "A1 {=B1 C1 [count] C2 [cat_token] cats B2} A2"",
            "outerTokenName": "=B1 C1 [count] C2 [cat_token] cats B2",
            "text": "B1 {=C1 [count] C2 [cat_token] cats} B2",
            "tokenAliases": {
              "=C1 [count] C2 [cat_token] cats": "=m1",
            },
          },
          "_1": {
            "desc": "In the phrase: "A1 {=B1 C1 [count] C2 cat B2} A2"",
            "outerTokenName": "=B1 C1 [count] C2 cat B2",
            "text": "B1 {=C1 [count] C2 cat} B2",
            "tokenAliases": {
              "=C1 [count] C2 cat": "=m1",
            },
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 16,
        "index": 456,
        "line": 15,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 12,
        "index": 122,
        "line": 6,
      },
    },
    "project": "",
  },
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "token": "count",
          "type": 2,
        },
        {
          "singular": true,
          "token": "cat_token",
          "type": 2,
        },
      ],
      "t": {
        "*": {
          "*": {
            "desc": "In the phrase: "A1 B1 {=C1 [count] C2 [cat_token] cats} B2 A2"",
            "outerTokenName": "=C1 [count] C2 [cat_token] cats",
            "text": "C1 {count} C2 {cat_token} cats",
          },
          "_1": {
            "desc": "In the phrase: "A1 B1 {=C1 [count] C2 cat} B2 A2"",
            "outerTokenName": "=C1 [count] C2 cat",
            "text": "C1 {count} C2 cat",
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 18,
        "index": 422,
        "line": 13,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 14,
        "index": 157,
        "line": 8,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should not throw when a fbt.param is nested inside a fbt which is nested inside a fbt.name" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "token": "name",
          "type": 1,
        },
      ],
      "t": {
        "*": {
          "desc": "desc",
          "text": "a {name} b",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 289,
        "line": 15,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "desc inner",
        "text": "{paramName}",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 13,
        "index": 212,
        "line": 10,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 12,
        "index": 122,
        "line": 7,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using array arguments: Meta-data collection should collect correct meta data for scenario "should respect the doNotExtract option" 1`] = `[]`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should accept well-formed options" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A string that moved files'], 'options!', {
  author: 'jwatson',
  project: 'Super Secret'
})",
  "__stringVariationArgs": [],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'A string that moved files'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": "jwatson",
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "Super Secret",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should avoid creating identifers with conflicted name when there exist inner strings and string variations" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param("name", <b className="padRight">{this.state.ex1Name}</b>, {
  "gender": this.state.ex1Gender
}), " has shared ", <a className="neatoLink" href="#" tabindex={123} id={"uniq"}>
              <strong>
                {fbt.plural(" a photo", this.state.ex1Count, {
      "many": "photos",
      "showCount": "ifMany"
    })}
              </strong>
            </a>, " with you "], "example 1")",
  "__stringVariationArgs": [
    GenderStringVariationArg {
      "__nodeCode": "this.state.ex1Gender",
      "candidateValues": [
        "*",
      ],
      "fbtNode": "FbtParamNode",
      "isCollapsible": false,
      "node": "Node[type=MemberExpression]",
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "this.state.ex1Count",
      "candidateValues": [
        "*",
        "_1",
      ],
      "fbtNode": "FbtPluralNode",
      "isCollapsible": false,
      "node": "Node[type=MemberExpression]",
      "value": undefined,
    },
  ],
  "_tokenSet": {
    "=[number] photos": "Node[type=JSXElement]",
    "=a photo": "Node[type=JSXElement]",
    "name": "Node[type=CallExpression]",
  },
  "children": [
    FbtParamNode {
      "__nodeCode": "fbt.param("name", <b className="padRight">{this.state.ex1Name}</b>, {
  "gender": this.state.ex1Gender
})",
      "__stringVariationArgs": [
        GenderStringVariationArg {
          "__nodeCode": "this.state.ex1Gender",
          "candidateValues": [
            "*",
          ],
          "fbtNode": "FbtParamNode",
          "isCollapsible": false,
          "node": "Node[type=MemberExpression]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__genderCode": "this.state.ex1Gender",
        "__valueCode": "<b className="padRight">{this.state.ex1Name}</b>",
        "gender": "Node[type=MemberExpression]",
        "name": "name",
        "number": null,
        "value": "Node[type=JSXElement]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "" has shared "",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtImplicitParamNode {
      "__nodeCode": "<a className="neatoLink" href="#" tabindex={123} id={"uniq"}>
              <strong>
                {fbt.plural(" a photo", this.state.ex1Count, {
      "many": "photos",
      "showCount": "ifMany"
    })}
              </strong>
            </a>",
      "__stringVariationArgs": [
        NumberStringVariationArg {
          "__nodeCode": "this.state.ex1Count",
          "candidateValues": [
            "*",
            "_1",
          ],
          "fbtNode": "FbtPluralNode",
          "isCollapsible": false,
          "node": "Node[type=MemberExpression]",
          "value": undefined,
        },
      ],
      "_tokenSet": {
        "=[number] photos": "Node[type=JSXElement]",
        "=a photo": "Node[type=JSXElement]",
      },
      "children": [
        FbtTextNode {
          "__nodeCode": "",
          "__stringVariationArgs": [],
          "children": [],
          "moduleName": "fbt",
          "node": "Node[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "options": null,
          "parent": "FbtImplicitParamNode",
        },
        FbtImplicitParamNode {
          "__nodeCode": "<strong>
                {fbt.plural(" a photo", this.state.ex1Count, {
    "many": "photos",
    "showCount": "ifMany"
  })}
              </strong>",
          "__stringVariationArgs": [
            NumberStringVariationArg {
              "__nodeCode": "this.state.ex1Count",
              "candidateValues": [
                "*",
                "_1",
              ],
              "fbtNode": "FbtPluralNode",
              "isCollapsible": false,
              "node": "Node[type=MemberExpression]",
              "value": undefined,
            },
          ],
          "_tokenSet": {
            "number": "Node[type=CallExpression]",
          },
          "children": [
            FbtTextNode {
              "__nodeCode": "",
              "__stringVariationArgs": [],
              "children": [],
              "moduleName": "fbt",
              "node": "Node[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "options": null,
              "parent": "FbtImplicitParamNode",
            },
            FbtPluralNode {
              "__nodeCode": "fbt.plural(" a photo", this.state.ex1Count, {
  "many": "photos",
  "showCount": "ifMany"
})",
              "__stringVariationArgs": [
                NumberStringVariationArg {
                  "__nodeCode": "this.state.ex1Count",
                  "candidateValues": [
                    "*",
                    "_1",
                  ],
                  "fbtNode": "FbtPluralNode",
                  "isCollapsible": false,
                  "node": "Node[type=MemberExpression]",
                  "value": undefined,
                },
              ],
              "children": [],
              "moduleName": "fbt",
              "node": "Node[type=CallExpression]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "options": {
                "__countCode": "this.state.ex1Count",
                "count": "Node[type=MemberExpression]",
                "many": "photos",
                "name": "number",
                "showCount": "ifMany",
                "value": null,
              },
              "parent": "FbtImplicitParamNode",
            },
            FbtTextNode {
              "__nodeCode": "",
              "__stringVariationArgs": [],
              "children": [],
              "moduleName": "fbt",
              "node": "Node[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "options": null,
              "parent": "FbtImplicitParamNode",
            },
          ],
          "moduleName": "fbt",
          "node": "Node[type=JSXElement]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "options": null,
          "parent": "FbtImplicitParamNode",
        },
        FbtTextNode {
          "__nodeCode": "",
          "__stringVariationArgs": [],
          "children": [],
          "moduleName": "fbt",
          "node": "Node[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "options": null,
          "parent": "FbtImplicitParamNode",
        },
      ],
      "moduleName": "fbt",
      "node": "Node[type=JSXElement]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "" with you "",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should be able to nest within React nodes" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "__stringVariationArgs": [],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should convert simple strings" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A simple string'], "It's simple")",
  "__stringVariationArgs": [],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'A simple string'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should deduplicate branches when fbt.enum() calls share the same key" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "__stringVariationArgs": [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "candidateValues": [
        "groups",
        "photos",
        "videos",
      ],
      "fbtNode": "FbtEnumNode",
      "isCollapsible": false,
      "node": "Node[type=StringLiteral]",
      "value": undefined,
    },
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "candidateValues": [
        "groups",
        "photos",
        "videos",
      ],
      "fbtNode": "FbtEnumNode",
      "isCollapsible": false,
      "node": "Node[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "candidateValues": [
            "groups",
            "photos",
            "videos",
          ],
          "fbtNode": "FbtEnumNode",
          "isCollapsible": false,
          "node": "Node[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "'groups'",
        "range": {
          "groups": "Groups",
          "photos": "Photos",
          "videos": "Videos",
        },
        "value": "Node[type=StringLiteral]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "__stringVariationArgs": [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "candidateValues": [
            "groups",
            "photos",
            "videos",
          ],
          "fbtNode": "FbtEnumNode",
          "isCollapsible": false,
          "node": "Node[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "'groups'",
        "range": {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "Node[type=StringLiteral]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should get project from docblock" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Also simple string'], "It's simple")",
  "__stringVariationArgs": [],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'Also simple string'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle JSX fbt with multiple levels of nested strings" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([<b className="padRight">
          {fbt.enum(enumVal, ['today', 'yesterday'])}
        </b>, ", ", fbt.param("name", <b className="padRight">{viewerName}</b>, {
  "gender": viewerGender
}), " has shared ", <a className="neatoLink" href="#">
          {fbt.plural(" a photo", photoCount, {
    "many": "photos",
    "showCount": "ifMany"
  })}{' '}
          with
          <strong>
            {fbt.pronoun("object", otherGender, {
      "human": true
    })}
          </strong>
        </a>], "example 1")",
  "__stringVariationArgs": [
    EnumStringVariationArg {
      "__nodeCode": "enumVal",
      "candidateValues": [
        "today",
        "yesterday",
      ],
      "fbtNode": "FbtEnumNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
    GenderStringVariationArg {
      "__nodeCode": "viewerGender",
      "candidateValues": [
        "*",
      ],
      "fbtNode": "FbtParamNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "photoCount",
      "candidateValues": [
        "*",
        "_1",
      ],
      "fbtNode": "FbtPluralNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
    GenderStringVariationArg {
      "__nodeCode": "otherGender",
      "candidateValues": [
        1,
        2,
        "*",
      ],
      "fbtNode": "FbtPronounNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
  ],
  "_tokenSet": {
    "=[number] photos with her": "Node[type=JSXElement]",
    "=[number] photos with him": "Node[type=JSXElement]",
    "=[number] photos with them": "Node[type=JSXElement]",
    "=a photo with her": "Node[type=JSXElement]",
    "=a photo with him": "Node[type=JSXElement]",
    "=a photo with them": "Node[type=JSXElement]",
    "=today": "Node[type=JSXElement]",
    "=yesterday": "Node[type=JSXElement]",
    "name": "Node[type=CallExpression]",
  },
  "children": [
    FbtImplicitParamNode {
      "__nodeCode": "<b className="padRight">
          {fbt.enum(enumVal, ['today', 'yesterday'])}
        </b>",
      "__stringVariationArgs": [
        EnumStringVariationArg {
          "__nodeCode": "enumVal",
          "candidateValues": [
            "today",
            "yesterday",
          ],
          "fbtNode": "FbtEnumNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "_tokenSet": {},
      "children": [
        FbtTextNode {
          "__nodeCode": "",
          "__stringVariationArgs": [],
          "children": [],
          "moduleName": "fbt",
          "node": "Node[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "options": null,
          "parent": "FbtImplicitParamNode",
        },
        FbtEnumNode {
          "__nodeCode": "fbt.enum(enumVal, ['today', 'yesterday'])",
          "__stringVariationArgs": [
            EnumStringVariationArg {
              "__nodeCode": "enumVal",
              "candidateValues": [
                "today",
                "yesterday",
              ],
              "fbtNode": "FbtEnumNode",
              "isCollapsible": false,
              "node": "Node[type=Identifier]",
              "value": undefined,
            },
          ],
          "children": [],
          "moduleName": "fbt",
          "node": "Node[type=CallExpression]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "options": {
            "__valueCode": "enumVal",
            "range": {
              "today": "today",
              "yesterday": "yesterday",
            },
            "value": "Node[type=Identifier]",
          },
          "parent": "FbtImplicitParamNode",
        },
        FbtTextNode {
          "__nodeCode": "",
          "__stringVariationArgs": [],
          "children": [],
          "moduleName": "fbt",
          "node": "Node[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "options": null,
          "parent": "FbtImplicitParamNode",
        },
      ],
      "moduleName": "fbt",
      "node": "Node[type=JSXElement]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "", "",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtParamNode {
      "__nodeCode": "fbt.param("name", <b className="padRight">{viewerName}</b>, {
  "gender": viewerGender
})",
      "__stringVariationArgs": [
        GenderStringVariationArg {
          "__nodeCode": "viewerGender",
          "candidateValues": [
            "*",
          ],
          "fbtNode": "FbtParamNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__genderCode": "viewerGender",
        "__valueCode": "<b className="padRight">{viewerName}</b>",
        "gender": "Node[type=Identifier]",
        "name": "name",
        "number": null,
        "value": "Node[type=JSXElement]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "" has shared "",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtImplicitParamNode {
      "__nodeCode": "<a className="neatoLink" href="#">
          {fbt.plural(" a photo", photoCount, {
    "many": "photos",
    "showCount": "ifMany"
  })}{' '}
          with
          <strong>
            {fbt.pronoun("object", otherGender, {
      "human": true
    })}
          </strong>
        </a>",
      "__stringVariationArgs": [
        NumberStringVariationArg {
          "__nodeCode": "photoCount",
          "candidateValues": [
            "*",
            "_1",
          ],
          "fbtNode": "FbtPluralNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
        GenderStringVariationArg {
          "__nodeCode": "otherGender",
          "candidateValues": [
            1,
            2,
            "*",
          ],
          "fbtNode": "FbtPronounNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "_tokenSet": {
        "=her": "Node[type=JSXElement]",
        "=him": "Node[type=JSXElement]",
        "=them": "Node[type=JSXElement]",
        "number": "Node[type=CallExpression]",
      },
      "children": [
        FbtTextNode {
          "__nodeCode": "",
          "__stringVariationArgs": [],
          "children": [],
          "moduleName": "fbt",
          "node": "Node[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "options": null,
          "parent": "FbtImplicitParamNode",
        },
        FbtPluralNode {
          "__nodeCode": "fbt.plural(" a photo", photoCount, {
  "many": "photos",
  "showCount": "ifMany"
})",
          "__stringVariationArgs": [
            NumberStringVariationArg {
              "__nodeCode": "photoCount",
              "candidateValues": [
                "*",
                "_1",
              ],
              "fbtNode": "FbtPluralNode",
              "isCollapsible": false,
              "node": "Node[type=Identifier]",
              "value": undefined,
            },
          ],
          "children": [],
          "moduleName": "fbt",
          "node": "Node[type=CallExpression]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "options": {
            "__countCode": "photoCount",
            "count": "Node[type=Identifier]",
            "many": "photos",
            "name": "number",
            "showCount": "ifMany",
            "value": null,
          },
          "parent": "FbtImplicitParamNode",
        },
        FbtTextNode {
          "__nodeCode": "' '",
          "__stringVariationArgs": [],
          "children": [],
          "moduleName": "fbt",
          "node": "Node[type=StringLiteral]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "options": null,
          "parent": "FbtImplicitParamNode",
        },
        FbtTextNode {
          "__nodeCode": "with",
          "__stringVariationArgs": [],
          "children": [],
          "moduleName": "fbt",
          "node": "Node[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "options": null,
          "parent": "FbtImplicitParamNode",
        },
        FbtImplicitParamNode {
          "__nodeCode": "<strong>
            {fbt.pronoun("object", otherGender, {
    "human": true
  })}
          </strong>",
          "__stringVariationArgs": [
            GenderStringVariationArg {
              "__nodeCode": "otherGender",
              "candidateValues": [
                1,
                2,
                "*",
              ],
              "fbtNode": "FbtPronounNode",
              "isCollapsible": false,
              "node": "Node[type=Identifier]",
              "value": undefined,
            },
          ],
          "_tokenSet": {},
          "children": [
            FbtTextNode {
              "__nodeCode": "",
              "__stringVariationArgs": [],
              "children": [],
              "moduleName": "fbt",
              "node": "Node[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "options": null,
              "parent": "FbtImplicitParamNode",
            },
            FbtPronounNode {
              "__nodeCode": "fbt.pronoun("object", otherGender, {
  "human": true
})",
              "__stringVariationArgs": [
                GenderStringVariationArg {
                  "__nodeCode": "otherGender",
                  "candidateValues": [
                    1,
                    2,
                    "*",
                  ],
                  "fbtNode": "FbtPronounNode",
                  "isCollapsible": false,
                  "node": "Node[type=Identifier]",
                  "value": undefined,
                },
              ],
              "children": [],
              "moduleName": "fbt",
              "node": "Node[type=CallExpression]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "options": {
                "__genderCode": "otherGender",
                "capitalize": null,
                "gender": "Node[type=Identifier]",
                "human": true,
                "type": "object",
              },
              "parent": "FbtImplicitParamNode",
            },
            FbtTextNode {
              "__nodeCode": "",
              "__stringVariationArgs": [],
              "children": [],
              "moduleName": "fbt",
              "node": "Node[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "options": null,
              "parent": "FbtImplicitParamNode",
            },
          ],
          "moduleName": "fbt",
          "node": "Node[type=JSXElement]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "options": null,
          "parent": "FbtImplicitParamNode",
        },
        FbtTextNode {
          "__nodeCode": "",
          "__stringVariationArgs": [],
          "children": [],
          "moduleName": "fbt",
          "node": "Node[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "options": null,
          "parent": "FbtImplicitParamNode",
        },
      ],
      "moduleName": "fbt",
      "node": "Node[type=JSXElement]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle JSX fbt with two nested React elements" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param("name", <b className="padRight">{this.state.ex1Name}</b>, {
  "gender": this.state.ex1Gender
}), " has shared ", <a className="neatoLink" href="#" tabindex={123} id={"uniq"}>
          <strong>
            {fbt.plural(" a photo", this.state.ex1Count, {
      "many": "photos",
      "showCount": "ifMany"
    })}
          </strong>
        </a>, " with you "], "example 1")",
  "__stringVariationArgs": [
    GenderStringVariationArg {
      "__nodeCode": "this.state.ex1Gender",
      "candidateValues": [
        "*",
      ],
      "fbtNode": "FbtParamNode",
      "isCollapsible": false,
      "node": "Node[type=MemberExpression]",
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "this.state.ex1Count",
      "candidateValues": [
        "*",
        "_1",
      ],
      "fbtNode": "FbtPluralNode",
      "isCollapsible": false,
      "node": "Node[type=MemberExpression]",
      "value": undefined,
    },
  ],
  "_tokenSet": {
    "=[number] photos": "Node[type=JSXElement]",
    "=a photo": "Node[type=JSXElement]",
    "name": "Node[type=CallExpression]",
  },
  "children": [
    FbtParamNode {
      "__nodeCode": "fbt.param("name", <b className="padRight">{this.state.ex1Name}</b>, {
  "gender": this.state.ex1Gender
})",
      "__stringVariationArgs": [
        GenderStringVariationArg {
          "__nodeCode": "this.state.ex1Gender",
          "candidateValues": [
            "*",
          ],
          "fbtNode": "FbtParamNode",
          "isCollapsible": false,
          "node": "Node[type=MemberExpression]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__genderCode": "this.state.ex1Gender",
        "__valueCode": "<b className="padRight">{this.state.ex1Name}</b>",
        "gender": "Node[type=MemberExpression]",
        "name": "name",
        "number": null,
        "value": "Node[type=JSXElement]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "" has shared "",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtImplicitParamNode {
      "__nodeCode": "<a className="neatoLink" href="#" tabindex={123} id={"uniq"}>
          <strong>
            {fbt.plural(" a photo", this.state.ex1Count, {
      "many": "photos",
      "showCount": "ifMany"
    })}
          </strong>
        </a>",
      "__stringVariationArgs": [
        NumberStringVariationArg {
          "__nodeCode": "this.state.ex1Count",
          "candidateValues": [
            "*",
            "_1",
          ],
          "fbtNode": "FbtPluralNode",
          "isCollapsible": false,
          "node": "Node[type=MemberExpression]",
          "value": undefined,
        },
      ],
      "_tokenSet": {
        "=[number] photos": "Node[type=JSXElement]",
        "=a photo": "Node[type=JSXElement]",
      },
      "children": [
        FbtTextNode {
          "__nodeCode": "",
          "__stringVariationArgs": [],
          "children": [],
          "moduleName": "fbt",
          "node": "Node[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "options": null,
          "parent": "FbtImplicitParamNode",
        },
        FbtImplicitParamNode {
          "__nodeCode": "<strong>
            {fbt.plural(" a photo", this.state.ex1Count, {
    "many": "photos",
    "showCount": "ifMany"
  })}
          </strong>",
          "__stringVariationArgs": [
            NumberStringVariationArg {
              "__nodeCode": "this.state.ex1Count",
              "candidateValues": [
                "*",
                "_1",
              ],
              "fbtNode": "FbtPluralNode",
              "isCollapsible": false,
              "node": "Node[type=MemberExpression]",
              "value": undefined,
            },
          ],
          "_tokenSet": {
            "number": "Node[type=CallExpression]",
          },
          "children": [
            FbtTextNode {
              "__nodeCode": "",
              "__stringVariationArgs": [],
              "children": [],
              "moduleName": "fbt",
              "node": "Node[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "options": null,
              "parent": "FbtImplicitParamNode",
            },
            FbtPluralNode {
              "__nodeCode": "fbt.plural(" a photo", this.state.ex1Count, {
  "many": "photos",
  "showCount": "ifMany"
})",
              "__stringVariationArgs": [
                NumberStringVariationArg {
                  "__nodeCode": "this.state.ex1Count",
                  "candidateValues": [
                    "*",
                    "_1",
                  ],
                  "fbtNode": "FbtPluralNode",
                  "isCollapsible": false,
                  "node": "Node[type=MemberExpression]",
                  "value": undefined,
                },
              ],
              "children": [],
              "moduleName": "fbt",
              "node": "Node[type=CallExpression]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "options": {
                "__countCode": "this.state.ex1Count",
                "count": "Node[type=MemberExpression]",
                "many": "photos",
                "name": "number",
                "showCount": "ifMany",
                "value": null,
              },
              "parent": "FbtImplicitParamNode",
            },
            FbtTextNode {
              "__nodeCode": "",
              "__stringVariationArgs": [],
              "children": [],
              "moduleName": "fbt",
              "node": "Node[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "options": null,
              "parent": "FbtImplicitParamNode",
            },
          ],
          "moduleName": "fbt",
          "node": "Node[type=JSXElement]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "options": null,
          "parent": "FbtImplicitParamNode",
        },
        FbtTextNode {
          "__nodeCode": "",
          "__stringVariationArgs": [],
          "children": [],
          "moduleName": "fbt",
          "node": "Node[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "options": null,
          "parent": "FbtImplicitParamNode",
        },
      ],
      "moduleName": "fbt",
      "node": "Node[type=JSXElement]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "" with you "",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle a JSX fragment nested with fbt.param as an argument" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A1 ', <a>
            B1
            <b>
              C1
              {
      // fbt constructs like fbt.pronoun() should return some opaque type
      // like FbtElement to work with React components
    }
              {fbt.param('paramName', paramValue)}
              C2
            </b>
            B2
          </a>, ' A2'], 'string with nested JSX fragments', {
  subject: subjectValue
})",
  "__stringVariationArgs": [
    GenderStringVariationArg {
      "__nodeCode": "subjectValue",
      "candidateValues": [
        "*",
      ],
      "fbtNode": "FbtElementNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
    GenderStringVariationArg {
      "__nodeCode": "subjectValue",
      "candidateValues": [
        "*",
      ],
      "fbtNode": "FbtImplicitParamNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
    GenderStringVariationArg {
      "__nodeCode": "subjectValue",
      "candidateValues": [
        "*",
      ],
      "fbtNode": "FbtImplicitParamNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
  ],
  "_tokenSet": {
    "=B1 C1 [paramName] C2 B2": "Node[type=JSXElement]",
  },
  "children": [
    FbtTextNode {
      "__nodeCode": "'A1 '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtImplicitParamNode {
      "__nodeCode": "<a>
            B1
            <b>
              C1
              {
      // fbt constructs like fbt.pronoun() should return some opaque type
      // like FbtElement to work with React components
    }
              {fbt.param('paramName', paramValue)}
              C2
            </b>
            B2
          </a>",
      "__stringVariationArgs": [
        GenderStringVariationArg {
          "__nodeCode": "subjectValue",
          "candidateValues": [
            "*",
          ],
          "fbtNode": "FbtImplicitParamNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
        GenderStringVariationArg {
          "__nodeCode": "subjectValue",
          "candidateValues": [
            "*",
          ],
          "fbtNode": "FbtImplicitParamNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "_tokenSet": {
        "=C1 [paramName] C2": "Node[type=JSXElement]",
      },
      "children": [
        FbtTextNode {
          "__nodeCode": "B1",
          "__stringVariationArgs": [],
          "children": [],
          "moduleName": "fbt",
          "node": "Node[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "options": null,
          "parent": "FbtImplicitParamNode",
        },
        FbtImplicitParamNode {
          "__nodeCode": "<b>
              C1
              {
    // fbt constructs like fbt.pronoun() should return some opaque type
    // like FbtElement to work with React components
  }
              {fbt.param('paramName', paramValue)}
              C2
            </b>",
          "__stringVariationArgs": [
            GenderStringVariationArg {
              "__nodeCode": "subjectValue",
              "candidateValues": [
                "*",
              ],
              "fbtNode": "FbtImplicitParamNode",
              "isCollapsible": false,
              "node": "Node[type=Identifier]",
              "value": undefined,
            },
          ],
          "_tokenSet": {
            "paramName": "Node[type=CallExpression]",
          },
          "children": [
            FbtTextNode {
              "__nodeCode": "C1",
              "__stringVariationArgs": [],
              "children": [],
              "moduleName": "fbt",
              "node": "Node[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "options": null,
              "parent": "FbtImplicitParamNode",
            },
            FbtTextNode {
              "__nodeCode": "",
              "__stringVariationArgs": [],
              "children": [],
              "moduleName": "fbt",
              "node": "Node[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "options": null,
              "parent": "FbtImplicitParamNode",
            },
            FbtParamNode {
              "__nodeCode": "fbt.param('paramName', paramValue)",
              "__stringVariationArgs": [],
              "children": [],
              "moduleName": "fbt",
              "node": "Node[type=CallExpression]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "options": {
                "__valueCode": "paramValue",
                "gender": null,
                "name": "paramName",
                "number": null,
                "value": "Node[type=Identifier]",
              },
              "parent": "FbtImplicitParamNode",
            },
            FbtTextNode {
              "__nodeCode": "C2",
              "__stringVariationArgs": [],
              "children": [],
              "moduleName": "fbt",
              "node": "Node[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "options": null,
              "parent": "FbtImplicitParamNode",
            },
          ],
          "moduleName": "fbt",
          "node": "Node[type=JSXElement]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "options": null,
          "parent": "FbtImplicitParamNode",
        },
        FbtTextNode {
          "__nodeCode": "B2",
          "__stringVariationArgs": [],
          "children": [],
          "moduleName": "fbt",
          "node": "Node[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "options": null,
          "parent": "FbtImplicitParamNode",
        },
      ],
      "moduleName": "fbt",
      "node": "Node[type=JSXElement]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' A2'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "__subjectCode": "subjectValue",
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": "Node[type=Identifier]",
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle duplicate enums" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "__stringVariationArgs": [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "candidateValues": [
        "groups",
        "photos",
        "videos",
      ],
      "fbtNode": "FbtEnumNode",
      "isCollapsible": false,
      "node": "Node[type=StringLiteral]",
      "value": undefined,
    },
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "candidateValues": [
        "groups",
        "photos",
        "videos",
      ],
      "fbtNode": "FbtEnumNode",
      "isCollapsible": false,
      "node": "Node[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "candidateValues": [
            "groups",
            "photos",
            "videos",
          ],
          "fbtNode": "FbtEnumNode",
          "isCollapsible": false,
          "node": "Node[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "'groups'",
        "range": {
          "groups": "Groups",
          "photos": "Photos",
          "videos": "Videos",
        },
        "value": "Node[type=StringLiteral]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "__stringVariationArgs": [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "candidateValues": [
            "groups",
            "photos",
            "videos",
          ],
          "fbtNode": "FbtEnumNode",
          "isCollapsible": false,
          "node": "Node[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "'groups'",
        "range": {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "Node[type=StringLiteral]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums (with array values)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('groups', ['groups', 'photos', 'videos'])], 'enum as an array')",
  "__stringVariationArgs": [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "candidateValues": [
        "groups",
        "photos",
        "videos",
      ],
      "fbtNode": "FbtEnumNode",
      "isCollapsible": false,
      "node": "Node[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "__stringVariationArgs": [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "candidateValues": [
            "groups",
            "photos",
            "videos",
          ],
          "fbtNode": "FbtEnumNode",
          "isCollapsible": false,
          "node": "Node[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "'groups'",
        "range": {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "Node[type=StringLiteral]",
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums (with enum range as variable)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('id1', aEnum)], 'enum as an array')",
  "__stringVariationArgs": [
    EnumStringVariationArg {
      "__nodeCode": "'id1'",
      "candidateValues": [
        "id1",
        "id2",
        "id3",
      ],
      "fbtNode": "FbtEnumNode",
      "isCollapsible": false,
      "node": "Node[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('id1', aEnum)",
      "__stringVariationArgs": [
        EnumStringVariationArg {
          "__nodeCode": "'id1'",
          "candidateValues": [
            "id1",
            "id2",
            "id3",
          ],
          "fbtNode": "FbtEnumNode",
          "isCollapsible": false,
          "node": "Node[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "'id1'",
        "range": {
          "id1": "groups",
          "id2": "photos",
          "id3": "videos",
        },
        "value": "Node[type=StringLiteral]",
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums (with value map)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})], 'enum as an object')",
  "__stringVariationArgs": [
    EnumStringVariationArg {
      "__nodeCode": "'id1'",
      "candidateValues": [
        "id1",
        "id2",
        "id3",
      ],
      "fbtNode": "FbtEnumNode",
      "isCollapsible": false,
      "node": "Node[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})",
      "__stringVariationArgs": [
        EnumStringVariationArg {
          "__nodeCode": "'id1'",
          "candidateValues": [
            "id1",
            "id2",
            "id3",
          ],
          "fbtNode": "FbtEnumNode",
          "isCollapsible": false,
          "node": "Node[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "'id1'",
        "range": {
          "id1": "groups",
          "id2": "photos",
          "id3": "videos",
        },
        "value": "Node[type=StringLiteral]",
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums with more text after" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Hello, ', fbt.enum('groups', ['groups', 'photos', 'videos']), '!'], 'enums!')",
  "__stringVariationArgs": [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "candidateValues": [
        "groups",
        "photos",
        "videos",
      ],
      "fbtNode": "FbtEnumNode",
      "isCollapsible": false,
      "node": "Node[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'Hello, '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "__stringVariationArgs": [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "candidateValues": [
            "groups",
            "photos",
            "videos",
          ],
          "fbtNode": "FbtEnumNode",
          "isCollapsible": false,
          "node": "Node[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "'groups'",
        "range": {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "Node[type=StringLiteral]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle multiple plurals with no showCount (i.e. no named params)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('is ', count, {
  many: 'are '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "__stringVariationArgs": [
    NumberStringVariationArg {
      "__nodeCode": "count",
      "candidateValues": [
        "*",
        "_1",
      ],
      "fbtNode": "FbtPluralNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "count",
      "candidateValues": [
        "*",
        "_1",
      ],
      "fbtNode": "FbtPluralNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
  ],
  "_tokenSet": {
    "number": "Node[type=CallExpression]",
  },
  "children": [
    FbtTextNode {
      "__nodeCode": "'There '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('is ', count, {
  many: 'are '
})",
      "__stringVariationArgs": [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "candidateValues": [
            "*",
            "_1",
          ],
          "fbtNode": "FbtPluralNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__countCode": "count",
        "count": "Node[type=Identifier]",
        "many": "are ",
        "name": null,
        "showCount": "no",
        "value": null,
      },
      "parent": "FbtElementNode",
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "__stringVariationArgs": [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "candidateValues": [
            "*",
            "_1",
          ],
          "fbtNode": "FbtPluralNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__countCode": "count",
        "count": "Node[type=Identifier]",
        "many": "likes",
        "name": "number",
        "showCount": "ifMany",
        "value": null,
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle names" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You just friended ', fbt.name('name', personname, gender)], 'names')",
  "__stringVariationArgs": [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "candidateValues": [
        "*",
      ],
      "fbtNode": "FbtNameNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
  ],
  "_tokenSet": {
    "name": "Node[type=CallExpression]",
  },
  "children": [
    FbtTextNode {
      "__nodeCode": "'You just friended '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtNameNode {
      "__nodeCode": "fbt.name('name', personname, gender)",
      "__stringVariationArgs": [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "candidateValues": [
            "*",
          ],
          "fbtNode": "FbtNameNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__genderCode": "gender",
        "__valueCode": "personname",
        "gender": "Node[type=Identifier]",
        "name": "name",
        "value": "Node[type=Identifier]",
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle object pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['I know ', fbt.pronoun('object', gender), '.'], 'object pronoun')",
  "__stringVariationArgs": [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "candidateValues": [
        0,
        1,
        2,
        "*",
      ],
      "fbtNode": "FbtPronounNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
  ],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'I know '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('object', gender)",
      "__stringVariationArgs": [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "candidateValues": [
            0,
            1,
            2,
            "*",
          ],
          "fbtNode": "FbtPronounNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__genderCode": "gender",
        "capitalize": null,
        "gender": "Node[type=Identifier]",
        "human": null,
        "type": "object",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'.'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle params" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A parameterized message to ', fbt.param('personName', truthy ? ifTrue : ifFalse)], 'Moar params')",
  "__stringVariationArgs": [],
  "_tokenSet": {
    "personName": "Node[type=CallExpression]",
  },
  "children": [
    FbtTextNode {
      "__nodeCode": "'A parameterized message to '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('personName', truthy ? ifTrue : ifFalse)",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "truthy ? ifTrue : ifFalse",
        "gender": null,
        "name": "personName",
        "number": null,
        "value": "Node[type=ConditionalExpression]",
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle plurals that have different count variables" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
}), ' and ', fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})], 'plurals')",
  "__stringVariationArgs": [
    NumberStringVariationArg {
      "__nodeCode": "catCount",
      "candidateValues": [
        "*",
        "_1",
      ],
      "fbtNode": "FbtPluralNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "dogCount",
      "candidateValues": [
        "*",
        "_1",
      ],
      "fbtNode": "FbtPluralNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
  ],
  "_tokenSet": {
    "cat_token": "Node[type=CallExpression]",
    "dog_token": "Node[type=CallExpression]",
  },
  "children": [
    FbtPluralNode {
      "__nodeCode": "fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
})",
      "__stringVariationArgs": [
        NumberStringVariationArg {
          "__nodeCode": "catCount",
          "candidateValues": [
            "*",
            "_1",
          ],
          "fbtNode": "FbtPluralNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__countCode": "catCount",
        "count": "Node[type=Identifier]",
        "many": null,
        "name": "cat_token",
        "showCount": "yes",
        "value": null,
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})",
      "__stringVariationArgs": [
        NumberStringVariationArg {
          "__nodeCode": "dogCount",
          "candidateValues": [
            "*",
            "_1",
          ],
          "fbtNode": "FbtPluralNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__countCode": "dogCount",
        "count": "Node[type=Identifier]",
        "many": null,
        "name": "dog_token",
        "showCount": "yes",
        "value": null,
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle plurals that share the same count variable" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "__stringVariationArgs": [
    NumberStringVariationArg {
      "__nodeCode": "count",
      "candidateValues": [
        "*",
        "_1",
      ],
      "fbtNode": "FbtPluralNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "count",
      "candidateValues": [
        "*",
        "_1",
      ],
      "fbtNode": "FbtPluralNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
  ],
  "_tokenSet": {
    "number": "Node[type=CallExpression]",
  },
  "children": [
    FbtTextNode {
      "__nodeCode": "'There '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
})",
      "__stringVariationArgs": [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "candidateValues": [
            "*",
            "_1",
          ],
          "fbtNode": "FbtPluralNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__countCode": "count",
        "count": "Node[type=Identifier]",
        "many": "were ",
        "name": null,
        "showCount": "no",
        "value": null,
      },
      "parent": "FbtElementNode",
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "__stringVariationArgs": [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "candidateValues": [
            "*",
            "_1",
          ],
          "fbtNode": "FbtPluralNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__countCode": "count",
        "count": "Node[type=Identifier]",
        "many": "likes",
        "name": "number",
        "showCount": "ifMany",
        "value": null,
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle possessive pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['It is ', fbt.pronoun('possessive', gender), ' birthday.'], 'possessive pronoun')",
  "__stringVariationArgs": [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "candidateValues": [
        "*",
        1,
        2,
      ],
      "fbtNode": "FbtPronounNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
  ],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'It is '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('possessive', gender)",
      "__stringVariationArgs": [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "candidateValues": [
            "*",
            1,
            2,
          ],
          "fbtNode": "FbtPronounNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__genderCode": "gender",
        "capitalize": null,
        "gender": "Node[type=Identifier]",
        "human": null,
        "type": "possessive",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' birthday.'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle subject and reflexive pronouns" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
}), ' wished ', fbt.pronoun('reflexive', gender, {
  human: true
}), ' a happy birthday.'], 'subject+reflexive pronouns')",
  "__stringVariationArgs": [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "candidateValues": [
        1,
        2,
        "*",
      ],
      "fbtNode": "FbtPronounNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "candidateValues": [
        1,
        2,
        "*",
      ],
      "fbtNode": "FbtPronounNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
  ],
  "_tokenSet": {},
  "children": [
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
})",
      "__stringVariationArgs": [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "candidateValues": [
            1,
            2,
            "*",
          ],
          "fbtNode": "FbtPronounNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__genderCode": "gender",
        "capitalize": true,
        "gender": "Node[type=Identifier]",
        "human": true,
        "type": "subject",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' wished '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('reflexive', gender, {
  human: true
})",
      "__stringVariationArgs": [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "candidateValues": [
            1,
            2,
            "*",
          ],
          "fbtNode": "FbtPronounNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__genderCode": "gender",
        "capitalize": null,
        "gender": "Node[type=Identifier]",
        "human": true,
        "type": "reflexive",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' a happy birthday.'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle variations + same param" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You have ', fbt.param('count', val, {
  number: true
}), ' likes. Comment on it to get more than ', fbt.sameParam('count'), ' likes'], 'test variations + sameParam')",
  "__stringVariationArgs": [
    NumberStringVariationArg {
      "candidateValues": [
        "*",
      ],
      "fbtNode": "FbtParamNode",
      "isCollapsible": false,
      "node": null,
      "value": undefined,
    },
  ],
  "_tokenSet": {
    "count": "Node[type=CallExpression]",
  },
  "children": [
    FbtTextNode {
      "__nodeCode": "'You have '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', val, {
  number: true
})",
      "__stringVariationArgs": [
        NumberStringVariationArg {
          "candidateValues": [
            "*",
          ],
          "fbtNode": "FbtParamNode",
          "isCollapsible": false,
          "node": null,
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "val",
        "gender": null,
        "name": "count",
        "number": true,
        "value": "Node[type=Identifier]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' likes. Comment on it to get more than '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('count')",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "name": "count",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' likes'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle variations" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.param('count', c, {
  number: true
}), ' links'], 'variations!')",
  "__stringVariationArgs": [
    NumberStringVariationArg {
      "candidateValues": [
        "*",
      ],
      "fbtNode": "FbtParamNode",
      "isCollapsible": false,
      "node": null,
      "value": undefined,
    },
  ],
  "_tokenSet": {
    "count": "Node[type=CallExpression]",
  },
  "children": [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', c, {
  number: true
})",
      "__stringVariationArgs": [
        NumberStringVariationArg {
          "candidateValues": [
            "*",
          ],
          "fbtNode": "FbtParamNode",
          "isCollapsible": false,
          "node": null,
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "c",
        "gender": null,
        "name": "count",
        "number": true,
        "value": "Node[type=Identifier]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' links'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": [],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": [],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 3`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": [],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should insert param in place of fbt.sameParam if it exists" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', val1), ' and ', fbt.sameParam('name1')], 'd')",
  "__stringVariationArgs": [],
  "_tokenSet": {
    "name1": "Node[type=CallExpression]",
  },
  "children": [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "val1",
        "gender": null,
        "name": "name1",
        "number": null,
        "value": "Node[type=Identifier]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('name1')",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "name": "name1",
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain intra-argument newlines" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', foo ? /*#__PURE__*/React.createElement("a", null, "bar") : qux), ' blah ', fbt.param('name2', qux)], 'a')",
  "__stringVariationArgs": [],
  "_tokenSet": {
    "name1": "Node[type=CallExpression]",
    "name2": "Node[type=CallExpression]",
  },
  "children": [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', foo ? /*#__PURE__*/React.createElement("a", null, "bar") : qux)",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "foo ? /*#__PURE__*/React.createElement("a", null, "bar") : qux",
        "gender": null,
        "name": "name1",
        "number": null,
        "value": "Node[type=ConditionalExpression]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' blah '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', qux)",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "qux",
        "gender": null,
        "name": "name2",
        "number": null,
        "value": "Node[type=Identifier]",
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain newlines when using string templates" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(["A simple string...\\nwith some other stuff."], 'blah')",
  "__stringVariationArgs": [],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": ""A simple string...\\nwith some other stuff."",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain newlines within arguments" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['a', ' b ', fbt.param('name1', val1), ' c ',
// comments
' d ', fbt.param('name2', val2), ' e '], 'a')",
  "__stringVariationArgs": [],
  "_tokenSet": {
    "name1": "Node[type=CallExpression]",
    "name2": "Node[type=CallExpression]",
  },
  "children": [
    FbtTextNode {
      "__nodeCode": "'a'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' b '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "val1",
        "gender": null,
        "name": "name1",
        "number": null,
        "value": "Node[type=Identifier]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' c '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "// comments
' d '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', val2)",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "val2",
        "gender": null,
        "name": "name2",
        "number": null,
        "value": "Node[type=Identifier]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' e '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should not throw for string with a nested JSX fragment and string variation arguments" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A1 ', <a>
              B1
              <b>
                C1
                {fbt.param('count', someRandomFunction(), {
      number: true
    })}
                C2
                {fbt.plural('cat', catCount, {
      value: someValueFunction(),
      name: 'cat_token',
      showCount: 'ifMany',
      many: 'cats'
    })}
              </b>
              B2
            </a>, ' A2'], 'string with nested JSX fragments')",
  "__stringVariationArgs": [
    NumberStringVariationArg {
      "candidateValues": [
        "*",
      ],
      "fbtNode": "FbtParamNode",
      "isCollapsible": false,
      "node": null,
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "catCount",
      "candidateValues": [
        "*",
        "_1",
      ],
      "fbtNode": "FbtPluralNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
  ],
  "_tokenSet": {
    "=B1 C1 [count] C2 [cat_token] cats B2": "Node[type=JSXElement]",
    "=B1 C1 [count] C2 cat B2": "Node[type=JSXElement]",
  },
  "children": [
    FbtTextNode {
      "__nodeCode": "'A1 '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtImplicitParamNode {
      "__nodeCode": "<a>
              B1
              <b>
                C1
                {fbt.param('count', someRandomFunction(), {
      number: true
    })}
                C2
                {fbt.plural('cat', catCount, {
      value: someValueFunction(),
      name: 'cat_token',
      showCount: 'ifMany',
      many: 'cats'
    })}
              </b>
              B2
            </a>",
      "__stringVariationArgs": [
        NumberStringVariationArg {
          "candidateValues": [
            "*",
          ],
          "fbtNode": "FbtParamNode",
          "isCollapsible": false,
          "node": null,
          "value": undefined,
        },
        NumberStringVariationArg {
          "__nodeCode": "catCount",
          "candidateValues": [
            "*",
            "_1",
          ],
          "fbtNode": "FbtPluralNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "_tokenSet": {
        "=C1 [count] C2 [cat_token] cats": "Node[type=JSXElement]",
        "=C1 [count] C2 cat": "Node[type=JSXElement]",
      },
      "children": [
        FbtTextNode {
          "__nodeCode": "B1",
          "__stringVariationArgs": [],
          "children": [],
          "moduleName": "fbt",
          "node": "Node[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "options": null,
          "parent": "FbtImplicitParamNode",
        },
        FbtImplicitParamNode {
          "__nodeCode": "<b>
                C1
                {fbt.param('count', someRandomFunction(), {
    number: true
  })}
                C2
                {fbt.plural('cat', catCount, {
    value: someValueFunction(),
    name: 'cat_token',
    showCount: 'ifMany',
    many: 'cats'
  })}
              </b>",
          "__stringVariationArgs": [
            NumberStringVariationArg {
              "candidateValues": [
                "*",
              ],
              "fbtNode": "FbtParamNode",
              "isCollapsible": false,
              "node": null,
              "value": undefined,
            },
            NumberStringVariationArg {
              "__nodeCode": "catCount",
              "candidateValues": [
                "*",
                "_1",
              ],
              "fbtNode": "FbtPluralNode",
              "isCollapsible": false,
              "node": "Node[type=Identifier]",
              "value": undefined,
            },
          ],
          "_tokenSet": {
            "cat_token": "Node[type=CallExpression]",
            "count": "Node[type=CallExpression]",
          },
          "children": [
            FbtTextNode {
              "__nodeCode": "C1",
              "__stringVariationArgs": [],
              "children": [],
              "moduleName": "fbt",
              "node": "Node[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "options": null,
              "parent": "FbtImplicitParamNode",
            },
            FbtParamNode {
              "__nodeCode": "fbt.param('count', someRandomFunction(), {
  number: true
})",
              "__stringVariationArgs": [
                NumberStringVariationArg {
                  "candidateValues": [
                    "*",
                  ],
                  "fbtNode": "FbtParamNode",
                  "isCollapsible": false,
                  "node": null,
                  "value": undefined,
                },
              ],
              "children": [],
              "moduleName": "fbt",
              "node": "Node[type=CallExpression]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "options": {
                "__valueCode": "someRandomFunction()",
                "gender": null,
                "name": "count",
                "number": true,
                "value": "Node[type=CallExpression]",
              },
              "parent": "FbtImplicitParamNode",
            },
            FbtTextNode {
              "__nodeCode": "C2",
              "__stringVariationArgs": [],
              "children": [],
              "moduleName": "fbt",
              "node": "Node[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "options": null,
              "parent": "FbtImplicitParamNode",
            },
            FbtPluralNode {
              "__nodeCode": "fbt.plural('cat', catCount, {
  value: someValueFunction(),
  name: 'cat_token',
  showCount: 'ifMany',
  many: 'cats'
})",
              "__stringVariationArgs": [
                NumberStringVariationArg {
                  "__nodeCode": "catCount",
                  "candidateValues": [
                    "*",
                    "_1",
                  ],
                  "fbtNode": "FbtPluralNode",
                  "isCollapsible": false,
                  "node": "Node[type=Identifier]",
                  "value": undefined,
                },
              ],
              "children": [],
              "moduleName": "fbt",
              "node": "Node[type=CallExpression]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "options": {
                "__countCode": "catCount",
                "__valueCode": "someValueFunction()",
                "count": "Node[type=Identifier]",
                "many": "cats",
                "name": "cat_token",
                "showCount": "ifMany",
                "value": "Node[type=CallExpression]",
              },
              "parent": "FbtImplicitParamNode",
            },
            FbtTextNode {
              "__nodeCode": "",
              "__stringVariationArgs": [],
              "children": [],
              "moduleName": "fbt",
              "node": "Node[type=JSXText]",
              "nodeChecker": FbtNodeChecker {
                "moduleName": "fbt",
              },
              "options": null,
              "parent": "FbtImplicitParamNode",
            },
          ],
          "moduleName": "fbt",
          "node": "Node[type=JSXElement]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "options": null,
          "parent": "FbtImplicitParamNode",
        },
        FbtTextNode {
          "__nodeCode": "B2",
          "__stringVariationArgs": [],
          "children": [],
          "moduleName": "fbt",
          "node": "Node[type=JSXText]",
          "nodeChecker": FbtNodeChecker {
            "moduleName": "fbt",
          },
          "options": null,
          "parent": "FbtImplicitParamNode",
        },
      ],
      "moduleName": "fbt",
      "node": "Node[type=JSXElement]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' A2'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should not throw when a fbt.param is nested inside a fbt which is nested inside a fbt.name" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['a ', fbt.name('name', fbt([fbt.param('paramName', val2)], "desc inner"), gender), ' b'], 'desc')",
  "__stringVariationArgs": [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "candidateValues": [
        "*",
      ],
      "fbtNode": "FbtNameNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
  ],
  "_tokenSet": {
    "name": "Node[type=CallExpression]",
  },
  "children": [
    FbtTextNode {
      "__nodeCode": "'a '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtNameNode {
      "__nodeCode": "fbt.name('name', fbt([fbt.param('paramName', val2)], "desc inner"), gender)",
      "__stringVariationArgs": [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "candidateValues": [
            "*",
          ],
          "fbtNode": "FbtNameNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__genderCode": "gender",
        "__valueCode": "fbt([fbt.param('paramName', val2)], "desc inner")",
        "gender": "Node[type=Identifier]",
        "name": "name",
        "value": "Node[type=CallExpression]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' b'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should not throw when a fbt.param is nested inside a fbt which is nested inside a fbt.name" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('paramName', val2)], "desc inner")",
  "__stringVariationArgs": [],
  "_tokenSet": {
    "paramName": "Node[type=CallExpression]",
  },
  "children": [
    FbtParamNode {
      "__nodeCode": "fbt.param('paramName', val2)",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "val2",
        "gender": null,
        "name": "paramName",
        "number": null,
        "value": "Node[type=Identifier]",
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Meta-data collection should create correct FbtNode objects for scenario "should respect the doNotExtract option" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A doNotExtract string'], "should not be extracted", {
  doNotExtract: true
})",
  "__stringVariationArgs": [],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'A doNotExtract string'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": true,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using array arguments: Translation transform should accept well-formed options 1`] = `
"import { fbt } from "fbtee";
fbt._("A string that moved files", null, {
  hk: "r6xXC",
  project: "Super Secret"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should avoid creating identifers with conflicted name when there exist inner strings and string variations 1`] = `
"import { fbt } from "fbtee";
import React from 'react';
var fbt_sv_arg_2 = 2;
function a(fbt_sv_arg_3) {
  var fbt_sv_arg_1, fbt_sv_arg_4;
  var fbt_sv_arg_0 = 1;
  fbt_sv_arg_1 = fbt._param("name", /*#__PURE__*/React.createElement("b", {
    className: "padRight"
  }, this.state.ex1Name), [1, this.state.ex1Gender]), fbt_sv_arg_4 = fbt._plural(this.state.ex1Count, "number"), fbt._({
    "*": {
      "*": "{name} has shared {=m2} with you",
      _1: "{name} has shared {=m2} with you"
    }
  }, [fbt_sv_arg_1, fbt_sv_arg_4, fbt._implicitParam("=m2", /*#__PURE__*/React.createElement("a", {
    className: "neatoLink",
    href: "#",
    tabindex: 123,
    id: "uniq"
  }, fbt._({
    "*": {
      "*": "{=m1}",
      _1: "{=m1}"
    }
  }, [fbt_sv_arg_1, fbt_sv_arg_4, fbt._implicitParam("=m1", /*#__PURE__*/React.createElement("strong", null, fbt._({
    "*": {
      "*": "{number} photos",
      _1: "a photo"
    }
  }, [fbt_sv_arg_1, fbt_sv_arg_4], {
    hk: "BNUvh"
  })))], {
    hk: "1X90MQ"
  })))], {
    hk: "46j2Ai"
  });
}"
`;

exports[`Functional FBT API using array arguments: Translation transform should be able to nest within React nodes 1`] = `
"import { fbt } from "fbtee";
import React from 'react';
var x = /*#__PURE__*/React.createElement("div", null, fbt._("A nested string", null, {
  hk: "2Z1yyy"
}));"
`;

exports[`Functional FBT API using array arguments: Translation transform should convert simple strings 1`] = `
"import { fbt } from "fbtee";
var x = fbt._("A simple string", null, {
  hk: "pITkM"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should deduplicate branches when fbt.enum() calls share the same key 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  groups: "Look! Groups and groups!",
  photos: "Look! Photos and photos!",
  videos: "Look! Videos and videos!"
}, [fbt._enum('groups', {
  "groups": "Groups",
  "photos": "Photos",
  "videos": "Videos"
})], {
  hk: "42UBbJ"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should get project from docblock 1`] = `
"/** @fbt {"project": "dev"}*/
import { fbt } from "fbtee";
var x = fbt._("Also simple string", null, {
  hk: "28mclU",
  project: "dev"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should handle JSX fbt with multiple levels of nested strings 1`] = `
"var fbt_sv_arg_0, fbt_sv_arg_1, fbt_sv_arg_2, fbt_sv_arg_3;
import { fbt } from "fbtee";
import React from 'react';
fbt_sv_arg_0 = fbt._enum(enumVal, {
  "today": "today",
  "yesterday": "yesterday"
}), fbt_sv_arg_1 = fbt._param("name", /*#__PURE__*/React.createElement("b", {
  className: "padRight"
}, viewerName), [1, viewerGender]), fbt_sv_arg_2 = fbt._plural(photoCount, "number"), fbt_sv_arg_3 = fbt._pronoun(0, otherGender, {
  human: 1
}), fbt._({
  today: {
    "*": {
      "*": {
        "1": "{=m0}, {name} has shared {=m4}",
        "2": "{=m0}, {name} has shared {=m4}",
        "*": "{=m0}, {name} has shared {=m4}"
      },
      _1: {
        "1": "{=m0}, {name} has shared {=m4}",
        "2": "{=m0}, {name} has shared {=m4}",
        "*": "{=m0}, {name} has shared {=m4}"
      }
    }
  },
  yesterday: {
    "*": {
      "*": {
        "1": "{=m0}, {name} has shared {=m4}",
        "2": "{=m0}, {name} has shared {=m4}",
        "*": "{=m0}, {name} has shared {=m4}"
      },
      _1: {
        "1": "{=m0}, {name} has shared {=m4}",
        "2": "{=m0}, {name} has shared {=m4}",
        "*": "{=m0}, {name} has shared {=m4}"
      }
    }
  }
}, [fbt_sv_arg_0, fbt_sv_arg_1, fbt_sv_arg_2, fbt_sv_arg_3, fbt._implicitParam("=m0", /*#__PURE__*/React.createElement("b", {
  className: "padRight"
}, fbt._({
  today: {
    "*": {
      "*": {
        "1": "today",
        "2": "today",
        "*": "today"
      },
      _1: {
        "1": "today",
        "2": "today",
        "*": "today"
      }
    }
  },
  yesterday: {
    "*": {
      "*": {
        "1": "yesterday",
        "2": "yesterday",
        "*": "yesterday"
      },
      _1: {
        "1": "yesterday",
        "2": "yesterday",
        "*": "yesterday"
      }
    }
  }
}, [fbt_sv_arg_0, fbt_sv_arg_1, fbt_sv_arg_2, fbt_sv_arg_3], {
  hk: "28J3Kz"
}))), fbt._implicitParam("=m4", /*#__PURE__*/React.createElement("a", {
  className: "neatoLink",
  href: "#"
}, fbt._({
  today: {
    "*": {
      "*": {
        "1": "{number} photos with {=m4}",
        "2": "{number} photos with {=m4}",
        "*": "{number} photos with {=m4}"
      },
      _1: {
        "1": "a photo with {=m4}",
        "2": "a photo with {=m4}",
        "*": "a photo with {=m4}"
      }
    }
  },
  yesterday: {
    "*": {
      "*": {
        "1": "{number} photos with {=m4}",
        "2": "{number} photos with {=m4}",
        "*": "{number} photos with {=m4}"
      },
      _1: {
        "1": "a photo with {=m4}",
        "2": "a photo with {=m4}",
        "*": "a photo with {=m4}"
      }
    }
  }
}, [fbt_sv_arg_0, fbt_sv_arg_1, fbt_sv_arg_2, fbt_sv_arg_3, fbt._implicitParam("=m4", /*#__PURE__*/React.createElement("strong", null, fbt._({
  today: {
    "*": {
      "*": {
        "1": "her",
        "2": "him",
        "*": "them"
      },
      _1: {
        "1": "her",
        "2": "him",
        "*": "them"
      }
    }
  },
  yesterday: {
    "*": {
      "*": {
        "1": "her",
        "2": "him",
        "*": "them"
      },
      _1: {
        "1": "her",
        "2": "him",
        "*": "them"
      }
    }
  }
}, [fbt_sv_arg_0, fbt_sv_arg_1, fbt_sv_arg_2, fbt_sv_arg_3], {
  hk: "2UiaDi"
})))], {
  hk: "1E4R2l"
})))], {
  hk: "1YA7gN"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should handle JSX fbt with two nested React elements 1`] = `
"var fbt_sv_arg_0, fbt_sv_arg_1;
import { fbt } from "fbtee";
import React from 'react';
fbt_sv_arg_0 = fbt._param("name", /*#__PURE__*/React.createElement("b", {
  className: "padRight"
}, this.state.ex1Name), [1, this.state.ex1Gender]), fbt_sv_arg_1 = fbt._plural(this.state.ex1Count, "number"), fbt._({
  "*": {
    "*": "{name} has shared {=m2} with you",
    _1: "{name} has shared {=m2} with you"
  }
}, [fbt_sv_arg_0, fbt_sv_arg_1, fbt._implicitParam("=m2", /*#__PURE__*/React.createElement("a", {
  className: "neatoLink",
  href: "#",
  tabindex: 123,
  id: "uniq"
}, fbt._({
  "*": {
    "*": "{=m1}",
    _1: "{=m1}"
  }
}, [fbt_sv_arg_0, fbt_sv_arg_1, fbt._implicitParam("=m1", /*#__PURE__*/React.createElement("strong", null, fbt._({
  "*": {
    "*": "{number} photos",
    _1: "a photo"
  }
}, [fbt_sv_arg_0, fbt_sv_arg_1], {
  hk: "BNUvh"
})))], {
  hk: "1X90MQ"
})))], {
  hk: "46j2Ai"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should handle a JSX fragment nested with fbt.param as an argument 1`] = `
"var fbt_sv_arg_0;
import { fbt } from "fbtee";
import React from 'react';
var x = (fbt_sv_arg_0 = fbt._subject(subjectValue), fbt._({
  "*": "A1 {=m1} A2"
}, [fbt_sv_arg_0, fbt._implicitParam("=m1", /*#__PURE__*/React.createElement("a", null, fbt._({
  "*": "B1 {=m1} B2"
}, [fbt_sv_arg_0, fbt._implicitParam("=m1", /*#__PURE__*/React.createElement("b", null, fbt._({
  "*": "C1 {paramName} C2"
}, [fbt_sv_arg_0, fbt._param("paramName", paramValue)], {
  hk: "3BwwfU"
})))], {
  hk: "2jJ1x5"
})))], {
  hk: "4Byrsa"
}));"
`;

exports[`Functional FBT API using array arguments: Translation transform should handle duplicate enums 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  groups: "Look! Groups and groups!",
  photos: "Look! Photos and photos!",
  videos: "Look! Videos and videos!"
}, [fbt._enum('groups', {
  "groups": "Groups",
  "photos": "Photos",
  "videos": "Videos"
})], {
  hk: "42UBbJ"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should handle enums (with array values) 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  groups: "Click to see groups",
  photos: "Click to see photos",
  videos: "Click to see videos"
}, [fbt._enum('groups', {
  "groups": "groups",
  "photos": "photos",
  "videos": "videos"
})], {
  hk: "1ScfXo"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should handle enums (with enum range as variable) 1`] = `
"import { fbt } from "fbtee";
var aEnum = require('Test$FbtEnum');
var x = fbt._({
  id1: "Click to see groups",
  id2: "Click to see photos",
  id3: "Click to see videos"
}, [fbt._enum('id1', aEnum)], {
  hk: "1xDhcs"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should handle enums (with value map) 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  id1: "Click to see groups",
  id2: "Click to see photos",
  id3: "Click to see videos"
}, [fbt._enum('id1', {
  "id1": "groups",
  "id2": "photos",
  "id3": "videos"
})], {
  hk: "2seglL"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should handle enums with more text after 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  groups: "Hello, groups!",
  photos: "Hello, photos!",
  videos: "Hello, videos!"
}, [fbt._enum('groups', {
  "groups": "groups",
  "photos": "photos",
  "videos": "videos"
})], {
  hk: "3vnBtJ"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should handle multiple plurals with no showCount (i.e. no named params) 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  "*": {
    "*": "There are {number} likes"
  },
  _1: {
    _1: "There is a like"
  }
}, [fbt._plural(count), fbt._plural(count, "number")], {
  hk: "41Uj4v"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should handle names 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  "*": "You just friended {name}"
}, [fbt._name("name", personname, gender)], {
  hk: "Gx1ns"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should handle object pronoun 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  "0": "I know this.",
  "1": "I know her.",
  "2": "I know him.",
  "*": "I know them."
}, [fbt._pronoun(0, gender)], {
  hk: "34RsDQ"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should handle params 1`] = `
"import { fbt } from "fbtee";
var x = fbt._("A parameterized message to {personName}", [fbt._param("personName", truthy ? ifTrue : ifFalse)], {
  hk: "OwweW"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should handle plurals that have different count variables 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  "*": {
    "*": "{cat_token} cats and {dog_token} dogs",
    _1: "{cat_token} cats and 1 dog"
  },
  _1: {
    "*": "1 cat and {dog_token} dogs",
    _1: "1 cat and 1 dog"
  }
}, [fbt._plural(catCount, "cat_token"), fbt._plural(dogCount, "dog_token")], {
  hk: "4aQltX"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should handle plurals that share the same count variable 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  "*": {
    "*": "There were {number} likes"
  },
  _1: {
    _1: "There was a like"
  }
}, [fbt._plural(count), fbt._plural(count, "number")], {
  hk: "47YVix"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should handle possessive pronoun 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  "1": "It is her birthday.",
  "2": "It is his birthday.",
  "*": "It is their birthday."
}, [fbt._pronoun(1, gender)], {
  hk: "2lyIqp"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should handle subject and reflexive pronouns 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  "1": {
    "1": "She wished herself a happy birthday."
  },
  "2": {
    "2": "He wished himself a happy birthday."
  },
  "*": {
    "*": "They wished themselves a happy birthday."
  }
}, [fbt._pronoun(3, gender, {
  human: 1
}), fbt._pronoun(2, gender, {
  human: 1
})], {
  hk: "2MyuU3"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should handle variations + same param 1`] = `
"import { fbt } from "fbtee";
var val = 42;
fbt._({
  "*": "You have {count} likes. Comment on it to get more than {count} likes"
}, [fbt._param("count", val, [0])], {
  hk: "24dKBV"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should handle variations 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  "*": "Click to see {count} links"
}, [fbt._param("count", c, [0])], {
  hk: "35KbmT"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should handler wrapping parens 1`] = `
"import { fbt } from "fbtee";
var x = fbt._("foobarbazqux", null, {
  hk: "3I3Hbn"
});
var y = fbt._("foobarbazqux", null, {
  hk: "3I3Hbn"
});
var q = fbt._("foobarbazqux", null, {
  hk: "3I3Hbn"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should insert param in place of fbt.sameParam if it exists 1`] = `
"import { fbt } from "fbtee";
var z = fbt._("{name1} and {name1}", [fbt._param("name1", val1)], {
  hk: "t1C6F"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should maintain intra-argument newlines 1`] = `
"import { fbt } from "fbtee";
var z = fbt._("{name1} blah {name2}", [fbt._param("name1", foo ? /*#__PURE__*/React.createElement("a", null, "bar") : qux), fbt._param("name2", qux)], {
  hk: "3QeQu8"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should maintain newlines when using string templates 1`] = `
"import { fbt } from "fbtee";
var x = fbt._("A simple string... with some other stuff.", null, {
  hk: "4EqKdm"
});
baz();"
`;

exports[`Functional FBT API using array arguments: Translation transform should maintain newlines within arguments 1`] = `
"import { fbt } from "fbtee";
var z = fbt._("a b {name1} c d {name2} e", [fbt._param("name1", val1), fbt._param("name2", val2)], {
  hk: "1CrB0g"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should not throw for string with a nested JSX fragment and string variation arguments 1`] = `
"var fbt_sv_arg_0, fbt_sv_arg_1;
import { fbt } from "fbtee";
import React from 'react';
var x = (fbt_sv_arg_0 = fbt._param("count", someRandomFunction(), [0]), fbt_sv_arg_1 = fbt._plural(catCount, "cat_token", someValueFunction()), fbt._({
  "*": {
    "*": "A1 {=m1} A2",
    _1: "A1 {=m1} A2"
  }
}, [fbt_sv_arg_0, fbt_sv_arg_1, fbt._implicitParam("=m1", /*#__PURE__*/React.createElement("a", null, fbt._({
  "*": {
    "*": "B1 {=m1} B2",
    _1: "B1 {=m1} B2"
  }
}, [fbt_sv_arg_0, fbt_sv_arg_1, fbt._implicitParam("=m1", /*#__PURE__*/React.createElement("b", null, fbt._({
  "*": {
    "*": "C1 {count} C2 {cat_token} cats",
    _1: "C1 {count} C2 cat"
  }
}, [fbt_sv_arg_0, fbt_sv_arg_1], {
  hk: "2bFaQn"
})))], {
  hk: "2snmgP"
})))], {
  hk: "2DnOU6"
}));"
`;

exports[`Functional FBT API using array arguments: Translation transform should not throw when a fbt.param is nested inside a fbt which is nested inside a fbt.name 1`] = `
"import { fbt } from "fbtee";
var z = fbt._({
  "*": "a {name} b"
}, [fbt._name("name", fbt._("{paramName}", [fbt._param("paramName", val2)], {
  hk: "3Z0xvC"
}), gender)], {
  hk: "4wSLAL"
});"
`;

exports[`Functional FBT API using array arguments: Translation transform should respect the doNotExtract option 1`] = `
"import { fbt } from "fbtee";
var x = fbt._("A doNotExtract string", null, {
  hk: "2KTsy7"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should accept well-formed options" 1`] = `
[
  {
    "author": "jwatson",
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "options!",
        "text": "A string that moved files",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 8,
        "index": 146,
        "line": 5,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 2,
        "index": 31,
        "line": 2,
      },
    },
    "project": "Super Secret",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should allow description concatenation" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "With a ridiculously long description that requires concatenation",
        "text": "A short string",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 168,
        "line": 6,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should be able to nest within React nodes" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "nested!",
        "text": "A nested string",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 53,
        "index": 111,
        "line": 3,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 20,
        "index": 78,
        "line": 3,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should convert simple strings" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "It's simple",
        "text": "A simple string",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 47,
        "index": 76,
        "line": 2,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should deduplicate branches when fbt.enum() calls share the same key in string templates" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
      ],
      "t": {
        "groups": {
          "desc": "enums!",
          "text": "Look! Groups and groups!",
        },
        "photos": {
          "desc": "enums!",
          "text": "Look! Photos and photos!",
        },
        "videos": {
          "desc": "enums!",
          "text": "Look! Videos and videos!",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 9,
        "index": 360,
        "line": 13,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should deduplicate branches when fbt.enum() calls share the same key" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
      ],
      "t": {
        "groups": {
          "desc": "enums!",
          "text": "Look! Groups and groups!",
        },
        "photos": {
          "desc": "enums!",
          "text": "Look! Photos and photos!",
        },
        "videos": {
          "desc": "enums!",
          "text": "Look! Videos and videos!",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 395,
        "line": 17,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should get project from docblock" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "It's simple",
        "text": "Also simple string",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 50,
        "index": 115,
        "line": 3,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 75,
        "line": 3,
      },
    },
    "project": "dev",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle duplicate enums" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
      ],
      "t": {
        "groups": {
          "desc": "enums!",
          "text": "Look! Groups and groups!",
        },
        "photos": {
          "desc": "enums!",
          "text": "Look! Photos and photos!",
        },
        "videos": {
          "desc": "enums!",
          "text": "Look! Videos and videos!",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 395,
        "line": 17,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle enums (with array values)" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
      ],
      "t": {
        "groups": {
          "desc": "enum as an array",
          "text": "Click to see groups",
        },
        "photos": {
          "desc": "enum as an array",
          "text": "Click to see photos",
        },
        "videos": {
          "desc": "enum as an array",
          "text": "Click to see videos",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 157,
        "line": 5,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle enums (with enum range as variable)" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
      ],
      "t": {
        "id1": {
          "desc": "enum as an array",
          "text": "Click to see groups",
        },
        "id2": {
          "desc": "enum as an array",
          "text": "Click to see photos",
        },
        "id3": {
          "desc": "enum as an array",
          "text": "Click to see videos",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 172,
        "line": 6,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 14,
        "index": 82,
        "line": 3,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle enums (with value map)" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
      ],
      "t": {
        "id1": {
          "desc": "enum as an object",
          "text": "Click to see groups",
        },
        "id2": {
          "desc": "enum as an object",
          "text": "Click to see photos",
        },
        "id3": {
          "desc": "enum as an object",
          "text": "Click to see videos",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 180,
        "line": 6,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle enums with more text after" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
      ],
      "t": {
        "groups": {
          "desc": "enums!",
          "text": "Hello, groups!",
        },
        "photos": {
          "desc": "enums!",
          "text": "Hello, photos!",
        },
        "videos": {
          "desc": "enums!",
          "text": "Hello, videos!",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 147,
        "line": 5,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle multiple plurals with no showCount (i.e. no named params)" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
        {
          "singular": true,
          "token": "number",
          "type": 2,
        },
      ],
      "t": {
        "*": {
          "*": {
            "desc": "plurals",
            "text": "There are {number} likes",
          },
        },
        "_1": {
          "_1": {
            "desc": "plurals",
            "text": "There is a like",
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 215,
        "line": 7,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle names" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "token": "name",
          "type": 1,
        },
      ],
      "t": {
        "*": {
          "desc": "names",
          "text": "You just friended {name}",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 137,
        "line": 5,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle object pronoun" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
      ],
      "t": {
        "*": {
          "desc": "object pronoun",
          "text": "I know them.",
        },
        "0": {
          "desc": "object pronoun",
          "text": "I know this.",
        },
        "1": {
          "desc": "object pronoun",
          "text": "I know her.",
        },
        "2": {
          "desc": "object pronoun",
          "text": "I know him.",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 9,
        "index": 164,
        "line": 7,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle params" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "Moar params",
        "text": "A parameterized message to {personName}",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 176,
        "line": 6,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle plurals that have different count variables" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "singular": true,
          "token": "cat_token",
          "type": 2,
        },
        {
          "singular": true,
          "token": "dog_token",
          "type": 2,
        },
      ],
      "t": {
        "*": {
          "*": {
            "desc": "plurals",
            "text": "{cat_token} cats and {dog_token} dogs",
          },
          "_1": {
            "desc": "plurals",
            "text": "{cat_token} cats and 1 dog",
          },
        },
        "_1": {
          "*": {
            "desc": "plurals",
            "text": "1 cat and {dog_token} dogs",
          },
          "_1": {
            "desc": "plurals",
            "text": "1 cat and 1 dog",
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 241,
        "line": 7,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle plurals that share the same count variable" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
        {
          "singular": true,
          "token": "number",
          "type": 2,
        },
      ],
      "t": {
        "*": {
          "*": {
            "desc": "plurals",
            "text": "There were {number} likes",
          },
        },
        "_1": {
          "_1": {
            "desc": "plurals",
            "text": "There was a like",
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 238,
        "line": 7,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle possessive pronoun" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
      ],
      "t": {
        "*": {
          "desc": "possessive pronoun",
          "text": "It is their birthday.",
        },
        "1": {
          "desc": "possessive pronoun",
          "text": "It is her birthday.",
        },
        "2": {
          "desc": "possessive pronoun",
          "text": "It is his birthday.",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 9,
        "index": 156,
        "line": 5,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle subject and reflexive pronouns" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        null,
        null,
      ],
      "t": {
        "*": {
          "*": {
            "desc": "subject+reflexive pronouns",
            "text": "They wished themselves a happy birthday.",
          },
        },
        "1": {
          "1": {
            "desc": "subject+reflexive pronouns",
            "text": "She wished herself a happy birthday.",
          },
        },
        "2": {
          "2": {
            "desc": "subject+reflexive pronouns",
            "text": "He wished himself a happy birthday.",
          },
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 9,
        "index": 290,
        "line": 8,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle variations + same param" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "token": "count",
          "type": 2,
        },
      ],
      "t": {
        "*": {
          "desc": "test variations + sameParam",
          "text": "You have {count} likes. Comment on it to get more than {count} likes",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 277,
        "line": 10,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 6,
        "index": 51,
        "line": 3,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handle variations" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "token": "count",
          "type": 2,
        },
      ],
      "t": {
        "*": {
          "desc": "variations!",
          "text": "Click to see {count} links",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 150,
        "line": 5,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should handler wrapping parens" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "desc",
        "text": "foobarbazqux",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 52,
        "index": 81,
        "line": 2,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "desc",
        "text": "foobarbazqux",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 58,
        "index": 141,
        "line": 3,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 14,
        "index": 97,
        "line": 3,
      },
    },
    "project": "",
  },
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "desc",
        "text": "foobarbazqux",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 58,
        "index": 201,
        "line": 4,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 14,
        "index": 157,
        "line": 4,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should insert param in place of fbt.sameParam if it exists" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "d",
        "text": "{name1} and {name1}",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 133,
        "line": 5,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should maintain intra-argument newlines" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "a",
        "text": "{name1} blah {name2}",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 284,
        "line": 16,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should maintain newlines when using string templates" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "blah",
        "text": "A simple string... with some other stuff.",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 120,
        "line": 6,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should maintain newlines within arguments" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "a",
        "text": "a b {name1} c d {name2} e",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 231,
        "line": 12,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should maintain newlines" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "blah",
        "text": "A simple string... with some other stuff.",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 132,
        "line": 6,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should not throw when a fbt.param is nested inside a fbt which is nested inside a fbt.name" 1`] = `
[
  {
    "filename": null,
    "jsfbt": {
      "m": [
        {
          "token": "name",
          "type": 1,
        },
      ],
      "t": {
        "*": {
          "desc": "desc",
          "text": "a {name} b",
        },
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 7,
        "index": 258,
        "line": 14,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 39,
        "line": 2,
      },
    },
    "project": "",
  },
  {
    "filename": null,
    "jsfbt": {
      "m": [],
      "t": {
        "desc": "desc inner",
        "text": "{paramName}",
      },
    },
    "loc": SourceLocation {
      "end": Position {
        "column": 11,
        "index": 189,
        "line": 9,
      },
      "filename": undefined,
      "identifierName": undefined,
      "start": Position {
        "column": 10,
        "index": 105,
        "line": 6,
      },
    },
    "project": "",
  },
]
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should collect correct meta data for scenario "should respect the doNotExtract option" 1`] = `[]`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should accept well-formed options" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A string that moved files'], 'options!', {
  author: 'jwatson',
  project: 'Super Secret'
})",
  "__stringVariationArgs": [],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'A string that moved files'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": "jwatson",
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "Super Secret",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should allow description concatenation" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A short string'], 'With a ridiculously long description that' + ' requires concatenation')",
  "__stringVariationArgs": [],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'A short string'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should be able to nest within React nodes" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A nested string'], 'nested!')",
  "__stringVariationArgs": [],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'A nested string'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should convert simple strings" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A simple string'], "It's simple")",
  "__stringVariationArgs": [],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'A simple string'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should deduplicate branches when fbt.enum() calls share the same key in string templates" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(["Look!  ", fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), "  and  ", fbt.enum('groups', {
  "groups": 'groups',
  "photos": 'photos',
  "videos": 'videos'
}), "!"], 'enums!')",
  "__stringVariationArgs": [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "candidateValues": [
        "groups",
        "photos",
        "videos",
      ],
      "fbtNode": "FbtEnumNode",
      "isCollapsible": false,
      "node": "Node[type=StringLiteral]",
      "value": undefined,
    },
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "candidateValues": [
        "groups",
        "photos",
        "videos",
      ],
      "fbtNode": "FbtEnumNode",
      "isCollapsible": false,
      "node": "Node[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": ""Look!  "",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "candidateValues": [
            "groups",
            "photos",
            "videos",
          ],
          "fbtNode": "FbtEnumNode",
          "isCollapsible": false,
          "node": "Node[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "'groups'",
        "range": {
          "groups": "Groups",
          "photos": "Photos",
          "videos": "Videos",
        },
        "value": "Node[type=StringLiteral]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": ""  and  "",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  "groups": 'groups',
  "photos": 'photos',
  "videos": 'videos'
})",
      "__stringVariationArgs": [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "candidateValues": [
            "groups",
            "photos",
            "videos",
          ],
          "fbtNode": "FbtEnumNode",
          "isCollapsible": false,
          "node": "Node[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "'groups'",
        "range": {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "Node[type=StringLiteral]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": ""!"",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should deduplicate branches when fbt.enum() calls share the same key" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "__stringVariationArgs": [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "candidateValues": [
        "groups",
        "photos",
        "videos",
      ],
      "fbtNode": "FbtEnumNode",
      "isCollapsible": false,
      "node": "Node[type=StringLiteral]",
      "value": undefined,
    },
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "candidateValues": [
        "groups",
        "photos",
        "videos",
      ],
      "fbtNode": "FbtEnumNode",
      "isCollapsible": false,
      "node": "Node[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "candidateValues": [
            "groups",
            "photos",
            "videos",
          ],
          "fbtNode": "FbtEnumNode",
          "isCollapsible": false,
          "node": "Node[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "'groups'",
        "range": {
          "groups": "Groups",
          "photos": "Photos",
          "videos": "Videos",
        },
        "value": "Node[type=StringLiteral]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "__stringVariationArgs": [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "candidateValues": [
            "groups",
            "photos",
            "videos",
          ],
          "fbtNode": "FbtEnumNode",
          "isCollapsible": false,
          "node": "Node[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "'groups'",
        "range": {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "Node[type=StringLiteral]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should get project from docblock" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Also simple string'], "It's simple")",
  "__stringVariationArgs": [],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'Also simple string'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle duplicate enums" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Look! ', fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
}), ' and ', fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
}), '!'], 'enums!')",
  "__stringVariationArgs": [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "candidateValues": [
        "groups",
        "photos",
        "videos",
      ],
      "fbtNode": "FbtEnumNode",
      "isCollapsible": false,
      "node": "Node[type=StringLiteral]",
      "value": undefined,
    },
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "candidateValues": [
        "groups",
        "photos",
        "videos",
      ],
      "fbtNode": "FbtEnumNode",
      "isCollapsible": false,
      "node": "Node[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'Look! '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'Groups',
  photos: 'Photos',
  videos: 'Videos'
})",
      "__stringVariationArgs": [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "candidateValues": [
            "groups",
            "photos",
            "videos",
          ],
          "fbtNode": "FbtEnumNode",
          "isCollapsible": false,
          "node": "Node[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "'groups'",
        "range": {
          "groups": "Groups",
          "photos": "Photos",
          "videos": "Videos",
        },
        "value": "Node[type=StringLiteral]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', {
  groups: 'groups',
  photos: 'photos',
  videos: 'videos'
})",
      "__stringVariationArgs": [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "candidateValues": [
            "groups",
            "photos",
            "videos",
          ],
          "fbtNode": "FbtEnumNode",
          "isCollapsible": false,
          "node": "Node[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "'groups'",
        "range": {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "Node[type=StringLiteral]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums (with array values)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('groups', ['groups', 'photos', 'videos'])], 'enum as an array')",
  "__stringVariationArgs": [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "candidateValues": [
        "groups",
        "photos",
        "videos",
      ],
      "fbtNode": "FbtEnumNode",
      "isCollapsible": false,
      "node": "Node[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "__stringVariationArgs": [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "candidateValues": [
            "groups",
            "photos",
            "videos",
          ],
          "fbtNode": "FbtEnumNode",
          "isCollapsible": false,
          "node": "Node[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "'groups'",
        "range": {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "Node[type=StringLiteral]",
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums (with enum range as variable)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('id1', aEnum)], 'enum as an array')",
  "__stringVariationArgs": [
    EnumStringVariationArg {
      "__nodeCode": "'id1'",
      "candidateValues": [
        "id1",
        "id2",
        "id3",
      ],
      "fbtNode": "FbtEnumNode",
      "isCollapsible": false,
      "node": "Node[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('id1', aEnum)",
      "__stringVariationArgs": [
        EnumStringVariationArg {
          "__nodeCode": "'id1'",
          "candidateValues": [
            "id1",
            "id2",
            "id3",
          ],
          "fbtNode": "FbtEnumNode",
          "isCollapsible": false,
          "node": "Node[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "'id1'",
        "range": {
          "id1": "groups",
          "id2": "photos",
          "id3": "videos",
        },
        "value": "Node[type=StringLiteral]",
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums (with value map)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})], 'enum as an object')",
  "__stringVariationArgs": [
    EnumStringVariationArg {
      "__nodeCode": "'id1'",
      "candidateValues": [
        "id1",
        "id2",
        "id3",
      ],
      "fbtNode": "FbtEnumNode",
      "isCollapsible": false,
      "node": "Node[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('id1', {
  id1: 'groups',
  id2: 'photos',
  id3: 'videos'
})",
      "__stringVariationArgs": [
        EnumStringVariationArg {
          "__nodeCode": "'id1'",
          "candidateValues": [
            "id1",
            "id2",
            "id3",
          ],
          "fbtNode": "FbtEnumNode",
          "isCollapsible": false,
          "node": "Node[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "'id1'",
        "range": {
          "id1": "groups",
          "id2": "photos",
          "id3": "videos",
        },
        "value": "Node[type=StringLiteral]",
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle enums with more text after" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Hello, ', fbt.enum('groups', ['groups', 'photos', 'videos']), '!'], 'enums!')",
  "__stringVariationArgs": [
    EnumStringVariationArg {
      "__nodeCode": "'groups'",
      "candidateValues": [
        "groups",
        "photos",
        "videos",
      ],
      "fbtNode": "FbtEnumNode",
      "isCollapsible": false,
      "node": "Node[type=StringLiteral]",
      "value": undefined,
    },
  ],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'Hello, '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtEnumNode {
      "__nodeCode": "fbt.enum('groups', ['groups', 'photos', 'videos'])",
      "__stringVariationArgs": [
        EnumStringVariationArg {
          "__nodeCode": "'groups'",
          "candidateValues": [
            "groups",
            "photos",
            "videos",
          ],
          "fbtNode": "FbtEnumNode",
          "isCollapsible": false,
          "node": "Node[type=StringLiteral]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "'groups'",
        "range": {
          "groups": "groups",
          "photos": "photos",
          "videos": "videos",
        },
        "value": "Node[type=StringLiteral]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'!'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle multiple plurals with no showCount (i.e. no named params)" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('is ', count, {
  many: 'are '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "__stringVariationArgs": [
    NumberStringVariationArg {
      "__nodeCode": "count",
      "candidateValues": [
        "*",
        "_1",
      ],
      "fbtNode": "FbtPluralNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "count",
      "candidateValues": [
        "*",
        "_1",
      ],
      "fbtNode": "FbtPluralNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
  ],
  "_tokenSet": {
    "number": "Node[type=CallExpression]",
  },
  "children": [
    FbtTextNode {
      "__nodeCode": "'There '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('is ', count, {
  many: 'are '
})",
      "__stringVariationArgs": [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "candidateValues": [
            "*",
            "_1",
          ],
          "fbtNode": "FbtPluralNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__countCode": "count",
        "count": "Node[type=Identifier]",
        "many": "are ",
        "name": null,
        "showCount": "no",
        "value": null,
      },
      "parent": "FbtElementNode",
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "__stringVariationArgs": [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "candidateValues": [
            "*",
            "_1",
          ],
          "fbtNode": "FbtPluralNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__countCode": "count",
        "count": "Node[type=Identifier]",
        "many": "likes",
        "name": "number",
        "showCount": "ifMany",
        "value": null,
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle names" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You just friended ', fbt.name('name', personname, gender)], 'names')",
  "__stringVariationArgs": [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "candidateValues": [
        "*",
      ],
      "fbtNode": "FbtNameNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
  ],
  "_tokenSet": {
    "name": "Node[type=CallExpression]",
  },
  "children": [
    FbtTextNode {
      "__nodeCode": "'You just friended '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtNameNode {
      "__nodeCode": "fbt.name('name', personname, gender)",
      "__stringVariationArgs": [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "candidateValues": [
            "*",
          ],
          "fbtNode": "FbtNameNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__genderCode": "gender",
        "__valueCode": "personname",
        "gender": "Node[type=Identifier]",
        "name": "name",
        "value": "Node[type=Identifier]",
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle object pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['I know ', fbt.pronoun('object', gender), '.'], 'object pronoun')",
  "__stringVariationArgs": [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "candidateValues": [
        0,
        1,
        2,
        "*",
      ],
      "fbtNode": "FbtPronounNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
  ],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'I know '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('object', gender)",
      "__stringVariationArgs": [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "candidateValues": [
            0,
            1,
            2,
            "*",
          ],
          "fbtNode": "FbtPronounNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__genderCode": "gender",
        "capitalize": null,
        "gender": "Node[type=Identifier]",
        "human": null,
        "type": "object",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'.'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle params" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A parameterized message to ', fbt.param('personName', truthy ? ifTrue : ifFalse)], 'Moar params')",
  "__stringVariationArgs": [],
  "_tokenSet": {
    "personName": "Node[type=CallExpression]",
  },
  "children": [
    FbtTextNode {
      "__nodeCode": "'A parameterized message to '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('personName', truthy ? ifTrue : ifFalse)",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "truthy ? ifTrue : ifFalse",
        "gender": null,
        "name": "personName",
        "number": null,
        "value": "Node[type=ConditionalExpression]",
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle plurals that have different count variables" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
}), ' and ', fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})], 'plurals')",
  "__stringVariationArgs": [
    NumberStringVariationArg {
      "__nodeCode": "catCount",
      "candidateValues": [
        "*",
        "_1",
      ],
      "fbtNode": "FbtPluralNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "dogCount",
      "candidateValues": [
        "*",
        "_1",
      ],
      "fbtNode": "FbtPluralNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
  ],
  "_tokenSet": {
    "cat_token": "Node[type=CallExpression]",
    "dog_token": "Node[type=CallExpression]",
  },
  "children": [
    FbtPluralNode {
      "__nodeCode": "fbt.plural('cat', catCount, {
  name: 'cat_token',
  showCount: 'yes'
})",
      "__stringVariationArgs": [
        NumberStringVariationArg {
          "__nodeCode": "catCount",
          "candidateValues": [
            "*",
            "_1",
          ],
          "fbtNode": "FbtPluralNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__countCode": "catCount",
        "count": "Node[type=Identifier]",
        "many": null,
        "name": "cat_token",
        "showCount": "yes",
        "value": null,
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('dog', dogCount, {
  name: 'dog_token',
  showCount: 'yes'
})",
      "__stringVariationArgs": [
        NumberStringVariationArg {
          "__nodeCode": "dogCount",
          "candidateValues": [
            "*",
            "_1",
          ],
          "fbtNode": "FbtPluralNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__countCode": "dogCount",
        "count": "Node[type=Identifier]",
        "many": null,
        "name": "dog_token",
        "showCount": "yes",
        "value": null,
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle plurals that share the same count variable" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['There ', fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
}), fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})], 'plurals')",
  "__stringVariationArgs": [
    NumberStringVariationArg {
      "__nodeCode": "count",
      "candidateValues": [
        "*",
        "_1",
      ],
      "fbtNode": "FbtPluralNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
    NumberStringVariationArg {
      "__nodeCode": "count",
      "candidateValues": [
        "*",
        "_1",
      ],
      "fbtNode": "FbtPluralNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
  ],
  "_tokenSet": {
    "number": "Node[type=CallExpression]",
  },
  "children": [
    FbtTextNode {
      "__nodeCode": "'There '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('was ', count, {
  showCount: 'no',
  many: 'were '
})",
      "__stringVariationArgs": [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "candidateValues": [
            "*",
            "_1",
          ],
          "fbtNode": "FbtPluralNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__countCode": "count",
        "count": "Node[type=Identifier]",
        "many": "were ",
        "name": null,
        "showCount": "no",
        "value": null,
      },
      "parent": "FbtElementNode",
    },
    FbtPluralNode {
      "__nodeCode": "fbt.plural('a like', count, {
  showCount: 'ifMany',
  many: 'likes'
})",
      "__stringVariationArgs": [
        NumberStringVariationArg {
          "__nodeCode": "count",
          "candidateValues": [
            "*",
            "_1",
          ],
          "fbtNode": "FbtPluralNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__countCode": "count",
        "count": "Node[type=Identifier]",
        "many": "likes",
        "name": "number",
        "showCount": "ifMany",
        "value": null,
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle possessive pronoun" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['It is ', fbt.pronoun('possessive', gender), ' birthday.'], 'possessive pronoun')",
  "__stringVariationArgs": [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "candidateValues": [
        "*",
        1,
        2,
      ],
      "fbtNode": "FbtPronounNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
  ],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'It is '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('possessive', gender)",
      "__stringVariationArgs": [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "candidateValues": [
            "*",
            1,
            2,
          ],
          "fbtNode": "FbtPronounNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__genderCode": "gender",
        "capitalize": null,
        "gender": "Node[type=Identifier]",
        "human": null,
        "type": "possessive",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' birthday.'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle subject and reflexive pronouns" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
}), ' wished ', fbt.pronoun('reflexive', gender, {
  human: true
}), ' a happy birthday.'], 'subject+reflexive pronouns')",
  "__stringVariationArgs": [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "candidateValues": [
        1,
        2,
        "*",
      ],
      "fbtNode": "FbtPronounNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "candidateValues": [
        1,
        2,
        "*",
      ],
      "fbtNode": "FbtPronounNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
  ],
  "_tokenSet": {},
  "children": [
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('subject', gender, {
  capitalize: true,
  human: true
})",
      "__stringVariationArgs": [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "candidateValues": [
            1,
            2,
            "*",
          ],
          "fbtNode": "FbtPronounNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__genderCode": "gender",
        "capitalize": true,
        "gender": "Node[type=Identifier]",
        "human": true,
        "type": "subject",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' wished '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtPronounNode {
      "__nodeCode": "fbt.pronoun('reflexive', gender, {
  human: true
})",
      "__stringVariationArgs": [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "candidateValues": [
            1,
            2,
            "*",
          ],
          "fbtNode": "FbtPronounNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__genderCode": "gender",
        "capitalize": null,
        "gender": "Node[type=Identifier]",
        "human": true,
        "type": "reflexive",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' a happy birthday.'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle variations + same param" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['You have ', fbt.param('count', val, {
  number: true
}), ' likes. Comment on it to get more than ', fbt.sameParam('count'), ' likes'], 'test variations + sameParam')",
  "__stringVariationArgs": [
    NumberStringVariationArg {
      "candidateValues": [
        "*",
      ],
      "fbtNode": "FbtParamNode",
      "isCollapsible": false,
      "node": null,
      "value": undefined,
    },
  ],
  "_tokenSet": {
    "count": "Node[type=CallExpression]",
  },
  "children": [
    FbtTextNode {
      "__nodeCode": "'You have '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', val, {
  number: true
})",
      "__stringVariationArgs": [
        NumberStringVariationArg {
          "candidateValues": [
            "*",
          ],
          "fbtNode": "FbtParamNode",
          "isCollapsible": false,
          "node": null,
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "val",
        "gender": null,
        "name": "count",
        "number": true,
        "value": "Node[type=Identifier]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' likes. Comment on it to get more than '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('count')",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "name": "count",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' likes'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handle variations" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['Click to see ', fbt.param('count', c, {
  number: true
}), ' links'], 'variations!')",
  "__stringVariationArgs": [
    NumberStringVariationArg {
      "candidateValues": [
        "*",
      ],
      "fbtNode": "FbtParamNode",
      "isCollapsible": false,
      "node": null,
      "value": undefined,
    },
  ],
  "_tokenSet": {
    "count": "Node[type=CallExpression]",
  },
  "children": [
    FbtTextNode {
      "__nodeCode": "'Click to see '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('count', c, {
  number: true
})",
      "__stringVariationArgs": [
        NumberStringVariationArg {
          "candidateValues": [
            "*",
          ],
          "fbtNode": "FbtParamNode",
          "isCollapsible": false,
          "node": null,
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "c",
        "gender": null,
        "name": "count",
        "number": true,
        "value": "Node[type=Identifier]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' links'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": [],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": [],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should handler wrapping parens" 3`] = `
FbtElementNode {
  "__nodeCode": "fbt(['foo', 'bar', 'baz', 'qux'], 'desc')",
  "__stringVariationArgs": [],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'foo'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'bar'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'baz'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'qux'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should insert param in place of fbt.sameParam if it exists" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', val1), ' and ', fbt.sameParam('name1')], 'd')",
  "__stringVariationArgs": [],
  "_tokenSet": {
    "name1": "Node[type=CallExpression]",
  },
  "children": [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "val1",
        "gender": null,
        "name": "name1",
        "number": null,
        "value": "Node[type=Identifier]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' and '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtSameParamNode {
      "__nodeCode": "fbt.sameParam('name1')",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "name": "name1",
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain intra-argument newlines" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('name1', foo ? /*#__PURE__*/React.createElement("a", null, "bar") : qux), ' blah ', fbt.param('name2', qux)], 'a')",
  "__stringVariationArgs": [],
  "_tokenSet": {
    "name1": "Node[type=CallExpression]",
    "name2": "Node[type=CallExpression]",
  },
  "children": [
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', foo ? /*#__PURE__*/React.createElement("a", null, "bar") : qux)",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "foo ? /*#__PURE__*/React.createElement("a", null, "bar") : qux",
        "gender": null,
        "name": "name1",
        "number": null,
        "value": "Node[type=ConditionalExpression]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' blah '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', qux)",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "qux",
        "gender": null,
        "name": "name2",
        "number": null,
        "value": "Node[type=Identifier]",
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain newlines when using string templates" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(["A simple string...\\nwith some other stuff."], 'blah')",
  "__stringVariationArgs": [],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": ""A simple string...\\nwith some other stuff."",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain newlines within arguments" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['a', ' b ', fbt.param('name1', val1), ' c ',
// comments
' d ', fbt.param('name2', val2), ' e '], 'a')",
  "__stringVariationArgs": [],
  "_tokenSet": {
    "name1": "Node[type=CallExpression]",
    "name2": "Node[type=CallExpression]",
  },
  "children": [
    FbtTextNode {
      "__nodeCode": "'a'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' b '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name1', val1)",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "val1",
        "gender": null,
        "name": "name1",
        "number": null,
        "value": "Node[type=Identifier]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' c '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "// comments
' d '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtParamNode {
      "__nodeCode": "fbt.param('name2', val2)",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "val2",
        "gender": null,
        "name": "name2",
        "number": null,
        "value": "Node[type=Identifier]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' e '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should maintain newlines" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A simple string... ', 'with some other stuff.'], 'blah')",
  "__stringVariationArgs": [],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'A simple string... '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "'with some other stuff.'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should not throw when a fbt.param is nested inside a fbt which is nested inside a fbt.name" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['a ', fbt.name('name', fbt([fbt.param('paramName', val2)], "desc inner"), gender), ' b'], 'desc')",
  "__stringVariationArgs": [
    GenderStringVariationArg {
      "__nodeCode": "gender",
      "candidateValues": [
        "*",
      ],
      "fbtNode": "FbtNameNode",
      "isCollapsible": false,
      "node": "Node[type=Identifier]",
      "value": undefined,
    },
  ],
  "_tokenSet": {
    "name": "Node[type=CallExpression]",
  },
  "children": [
    FbtTextNode {
      "__nodeCode": "'a '",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
    FbtNameNode {
      "__nodeCode": "fbt.name('name', fbt([fbt.param('paramName', val2)], "desc inner"), gender)",
      "__stringVariationArgs": [
        GenderStringVariationArg {
          "__nodeCode": "gender",
          "candidateValues": [
            "*",
          ],
          "fbtNode": "FbtNameNode",
          "isCollapsible": false,
          "node": "Node[type=Identifier]",
          "value": undefined,
        },
      ],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__genderCode": "gender",
        "__valueCode": "fbt([fbt.param('paramName', val2)], "desc inner")",
        "gender": "Node[type=Identifier]",
        "name": "name",
        "value": "Node[type=CallExpression]",
      },
      "parent": "FbtElementNode",
    },
    FbtTextNode {
      "__nodeCode": "' b'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should not throw when a fbt.param is nested inside a fbt which is nested inside a fbt.name" 2`] = `
FbtElementNode {
  "__nodeCode": "fbt([fbt.param('paramName', val2)], "desc inner")",
  "__stringVariationArgs": [],
  "_tokenSet": {
    "paramName": "Node[type=CallExpression]",
  },
  "children": [
    FbtParamNode {
      "__nodeCode": "fbt.param('paramName', val2)",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=CallExpression]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": {
        "__valueCode": "val2",
        "gender": null,
        "name": "paramName",
        "number": null,
        "value": "Node[type=Identifier]",
      },
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": null,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Meta-data collection should create correct FbtNode objects for scenario "should respect the doNotExtract option" 1`] = `
FbtElementNode {
  "__nodeCode": "fbt(['A doNotExtract string'], "should not be extracted", {
  doNotExtract: true
})",
  "__stringVariationArgs": [],
  "_tokenSet": {},
  "children": [
    FbtTextNode {
      "__nodeCode": "'A doNotExtract string'",
      "__stringVariationArgs": [],
      "children": [],
      "moduleName": "fbt",
      "node": "Node[type=StringLiteral]",
      "nodeChecker": FbtNodeChecker {
        "moduleName": "fbt",
      },
      "options": null,
      "parent": "FbtElementNode",
    },
  ],
  "moduleName": "fbt",
  "node": "Node[type=CallExpression]",
  "nodeChecker": FbtNodeChecker {
    "moduleName": "fbt",
  },
  "options": {
    "author": null,
    "common": false,
    "doNotExtract": true,
    "extraOptions": {},
    "preserveWhitespace": false,
    "project": "",
    "subject": null,
  },
  "parent": null,
}
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should accept well-formed options 1`] = `
"import { fbt } from "fbtee";
fbt._("A string that moved files", null, {
  hk: "r6xXC",
  project: "Super Secret"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should allow description concatenation 1`] = `
"import { fbt } from "fbtee";
var x = fbt._("A short string", null, {
  hk: "20I8rg"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should be able to nest within React nodes 1`] = `
"import { fbt } from "fbtee";
import React from 'react';
var x = /*#__PURE__*/React.createElement("div", null, fbt._("A nested string", null, {
  hk: "2Z1yyy"
}));"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should convert simple strings 1`] = `
"import { fbt } from "fbtee";
var x = fbt._("A simple string", null, {
  hk: "pITkM"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should deduplicate branches when fbt.enum() calls share the same key 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  groups: "Look! Groups and groups!",
  photos: "Look! Photos and photos!",
  videos: "Look! Videos and videos!"
}, [fbt._enum('groups', {
  "groups": "Groups",
  "photos": "Photos",
  "videos": "Videos"
})], {
  hk: "42UBbJ"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should deduplicate branches when fbt.enum() calls share the same key in string templates 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  groups: "Look! Groups and groups!",
  photos: "Look! Photos and photos!",
  videos: "Look! Videos and videos!"
}, [fbt._enum('groups', {
  "groups": "Groups",
  "photos": "Photos",
  "videos": "Videos"
})], {
  hk: "42UBbJ"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should get project from docblock 1`] = `
"/** @fbt {"project": "dev"}*/
import { fbt } from "fbtee";
var x = fbt._("Also simple string", null, {
  hk: "28mclU",
  project: "dev"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should handle duplicate enums 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  groups: "Look! Groups and groups!",
  photos: "Look! Photos and photos!",
  videos: "Look! Videos and videos!"
}, [fbt._enum('groups', {
  "groups": "Groups",
  "photos": "Photos",
  "videos": "Videos"
})], {
  hk: "42UBbJ"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should handle enums (with array values) 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  groups: "Click to see groups",
  photos: "Click to see photos",
  videos: "Click to see videos"
}, [fbt._enum('groups', {
  "groups": "groups",
  "photos": "photos",
  "videos": "videos"
})], {
  hk: "1ScfXo"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should handle enums (with enum range as variable) 1`] = `
"import { fbt } from "fbtee";
var aEnum = require('Test$FbtEnum');
var x = fbt._({
  id1: "Click to see groups",
  id2: "Click to see photos",
  id3: "Click to see videos"
}, [fbt._enum('id1', aEnum)], {
  hk: "1xDhcs"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should handle enums (with value map) 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  id1: "Click to see groups",
  id2: "Click to see photos",
  id3: "Click to see videos"
}, [fbt._enum('id1', {
  "id1": "groups",
  "id2": "photos",
  "id3": "videos"
})], {
  hk: "2seglL"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should handle enums with more text after 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  groups: "Hello, groups!",
  photos: "Hello, photos!",
  videos: "Hello, videos!"
}, [fbt._enum('groups', {
  "groups": "groups",
  "photos": "photos",
  "videos": "videos"
})], {
  hk: "3vnBtJ"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should handle multiple plurals with no showCount (i.e. no named params) 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  "*": {
    "*": "There are {number} likes"
  },
  _1: {
    _1: "There is a like"
  }
}, [fbt._plural(count), fbt._plural(count, "number")], {
  hk: "41Uj4v"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should handle names 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  "*": "You just friended {name}"
}, [fbt._name("name", personname, gender)], {
  hk: "Gx1ns"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should handle object pronoun 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  "0": "I know this.",
  "1": "I know her.",
  "2": "I know him.",
  "*": "I know them."
}, [fbt._pronoun(0, gender)], {
  hk: "34RsDQ"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should handle params 1`] = `
"import { fbt } from "fbtee";
var x = fbt._("A parameterized message to {personName}", [fbt._param("personName", truthy ? ifTrue : ifFalse)], {
  hk: "OwweW"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should handle plurals that have different count variables 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  "*": {
    "*": "{cat_token} cats and {dog_token} dogs",
    _1: "{cat_token} cats and 1 dog"
  },
  _1: {
    "*": "1 cat and {dog_token} dogs",
    _1: "1 cat and 1 dog"
  }
}, [fbt._plural(catCount, "cat_token"), fbt._plural(dogCount, "dog_token")], {
  hk: "4aQltX"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should handle plurals that share the same count variable 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  "*": {
    "*": "There were {number} likes"
  },
  _1: {
    _1: "There was a like"
  }
}, [fbt._plural(count), fbt._plural(count, "number")], {
  hk: "47YVix"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should handle possessive pronoun 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  "1": "It is her birthday.",
  "2": "It is his birthday.",
  "*": "It is their birthday."
}, [fbt._pronoun(1, gender)], {
  hk: "2lyIqp"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should handle subject and reflexive pronouns 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  "1": {
    "1": "She wished herself a happy birthday."
  },
  "2": {
    "2": "He wished himself a happy birthday."
  },
  "*": {
    "*": "They wished themselves a happy birthday."
  }
}, [fbt._pronoun(3, gender, {
  human: 1
}), fbt._pronoun(2, gender, {
  human: 1
})], {
  hk: "2MyuU3"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should handle variations + same param 1`] = `
"import { fbt } from "fbtee";
var val = 42;
fbt._({
  "*": "You have {count} likes. Comment on it to get more than {count} likes"
}, [fbt._param("count", val, [0])], {
  hk: "24dKBV"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should handle variations 1`] = `
"import { fbt } from "fbtee";
var x = fbt._({
  "*": "Click to see {count} links"
}, [fbt._param("count", c, [0])], {
  hk: "35KbmT"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should handler wrapping parens 1`] = `
"import { fbt } from "fbtee";
var x = fbt._("foobarbazqux", null, {
  hk: "3I3Hbn"
});
var y = fbt._("foobarbazqux", null, {
  hk: "3I3Hbn"
});
var q = fbt._("foobarbazqux", null, {
  hk: "3I3Hbn"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should insert param in place of fbt.sameParam if it exists 1`] = `
"import { fbt } from "fbtee";
var z = fbt._("{name1} and {name1}", [fbt._param("name1", val1)], {
  hk: "t1C6F"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should maintain intra-argument newlines 1`] = `
"import { fbt } from "fbtee";
var z = fbt._("{name1} blah {name2}", [fbt._param("name1", foo ? /*#__PURE__*/React.createElement("a", null, "bar") : qux), fbt._param("name2", qux)], {
  hk: "3QeQu8"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should maintain newlines 1`] = `
"import { fbt } from "fbtee";
var x = fbt._("A simple string... with some other stuff.", null, {
  hk: "4EqKdm"
});
baz();"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should maintain newlines when using string templates 1`] = `
"import { fbt } from "fbtee";
var x = fbt._("A simple string... with some other stuff.", null, {
  hk: "4EqKdm"
});
baz();"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should maintain newlines within arguments 1`] = `
"import { fbt } from "fbtee";
var z = fbt._("a b {name1} c d {name2} e", [fbt._param("name1", val1), fbt._param("name2", val2)], {
  hk: "1CrB0g"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should not throw when a fbt.param is nested inside a fbt which is nested inside a fbt.name 1`] = `
"import { fbt } from "fbtee";
var z = fbt._({
  "*": "a {name} b"
}, [fbt._name("name", fbt._("{paramName}", [fbt._param("paramName", val2)], {
  hk: "3Z0xvC"
}), gender)], {
  hk: "4wSLAL"
});"
`;

exports[`Functional FBT API using string-concatenated arguments: Translation transform should respect the doNotExtract option 1`] = `
"import { fbt } from "fbtee";
var x = fbt._("A doNotExtract string", null, {
  hk: "2KTsy7"
});"
`;
