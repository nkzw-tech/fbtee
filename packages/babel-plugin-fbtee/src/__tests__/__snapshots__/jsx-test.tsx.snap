// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test declarative (jsx) fbt syntax translation Enable explicit whitespace 1`] = `
import { fbt } from "fbtee";
var x = fbt._(
  "{one} {two} {three}",
  [fbt._param("one", one), fbt._param("two", two), fbt._param("three", three)],
  {
    hk: "1AF7e1",
  }
);

`;

exports[`Test declarative (jsx) fbt syntax translation Squelch whitespace when in an expression 1`] = `
import { fbt } from "fbtee";
var x = fbt._("Squelched white space... with some other stuff.", null, {
  hk: "UtpyE",
});
baz();

`;

exports[`Test declarative (jsx) fbt syntax translation fbt:param with multiple empty expression containers should be ok 1`] = `
import { fbt } from "fbtee";
fbt._("{foo}", [fbt._param("foo", foo)], {
  hk: "2kCEE7",
});

`;

exports[`Test declarative (jsx) fbt syntax translation should be able to house arbitrary markup within fbt:param nodes 1`] = `
import { fbt } from "fbtee";
<div>
  {fbt._(
    "{time} by {user name}",
    [
      fbt._param("time", formatDate(date, "F d, Y")),
      fbt._param(
        "user name",
        <Link
          href={{
            url: user.link,
          }}
        >
          {user.name}
        </Link>
      ),
    ],
    {
      hk: "1KGso4",
    }
  )}
</div>;

`;

exports[`Test declarative (jsx) fbt syntax translation should be able to nest within React nodes 1`] = `
import { fbt } from "fbtee";
var x = (
  <div>
    {fbt._("A nested string", null, {
      hk: "2Z1yyy",
    })}
  </div>
);

`;

exports[`Test declarative (jsx) fbt syntax translation should convert simple strings 1`] = `
import { fbt } from "fbtee";
var x = fbt._("A simple string", null, {
  hk: "pITkM",
});

`;

exports[`Test declarative (jsx) fbt syntax translation should correctly destruct expression values in options 1`] = `
import { fbt } from "fbtee";
fbt._(
  {
    "*": "str {count}",
  },
  [fbt._param("count", getNum(), [0, someNum])],
  {
    hk: "A8zRg",
  }
);

`;

exports[`Test declarative (jsx) fbt syntax translation should filter comment and empty expressions from children 1`] = `
import { fbt } from "fbtee";
var x = fbt._("A simple string", null, {
  hk: "pITkM",
});

`;

exports[`Test declarative (jsx) fbt syntax translation should handle common string 1`] = `
import { fbt } from "fbtee";
fbt._("Done", null, {
  hk: "3wsyxm",
});

`;

exports[`Test declarative (jsx) fbt syntax translation should handle concatenated descriptions 1`] = `
import { fbt } from "fbtee";
fbt._("Here it is", null, {
  hk: "bwmzh",
});

`;

exports[`Test declarative (jsx) fbt syntax translation should handle empty string 1`] = `
import { fbt } from "fbtee";
var x = fbt._(
  "A parameterized message to: {emptyString}",
  [fbt._param("emptyString", " ")],
  {
    hk: "1k5iwm",
  }
);

`;

exports[`Test declarative (jsx) fbt syntax translation should handle enums (with array values) 1`] = `
import { fbt } from "fbtee";
var x = fbt._(
  {
    groups: "Click to see groups",
    photos: "Click to see photos",
    videos: "Click to see videos",
  },
  [
    fbt._enum(id, {
      groups: "groups",
      photos: "photos",
      videos: "videos",
    }),
  ],
  {
    hk: "2bHIKd",
  }
);

`;

exports[`Test declarative (jsx) fbt syntax translation should handle enums (with object values) 1`] = `
import { fbt } from "fbtee";
var x = fbt._(
  {
    id1: "Click to see groups",
    id2: "Click to see photos",
    id3: "Click to see videos",
  },
  [
    fbt._enum(id, {
      id1: "groups",
      id2: "photos",
      id3: "videos",
    }),
  ],
  {
    hk: "3SHnwE",
  }
);

`;

exports[`Test declarative (jsx) fbt syntax translation should handle enums with more text 1`] = `
import { fbt } from "fbtee";
var x = fbt._(
  {
    id1: "Click to see groups Hey-hey!",
    id2: "Click to see photos Hey-hey!",
    id3: "Click to see videos Hey-hey!",
  },
  [
    fbt._enum(id, {
      id1: "groups",
      id2: "photos",
      id3: "videos",
    }),
  ],
  {
    hk: "328Iya",
  }
);

`;

exports[`Test declarative (jsx) fbt syntax translation should handle fbt common attribute without value 1`] = `
import { fbt } from "fbtee";
fbt._("Okay", null, {
  hk: "2aLqR1",
});

`;

exports[`Test declarative (jsx) fbt syntax translation should handle number={true} - (same output as above test) 1`] = `
import { fbt } from "fbtee";
var x = fbt._(
  {
    "*": "Click to see {count} links",
  },
  [fbt._param("count", c, [0])],
  {
    hk: "35KbmT",
  }
);

`;

exports[`Test declarative (jsx) fbt syntax translation should handle object pronoun 1`] = `
import { fbt } from "fbtee";
fbt._(
  {
    0: "I know this.",
    1: "I know her.",
    2: "I know him.",
    "*": "I know them.",
  },
  [fbt._pronoun(0, gender)],
  {
    hk: "19l1pH",
  }
);

`;

exports[`Test declarative (jsx) fbt syntax translation should handle params 1`] = `
import { fbt } from "fbtee";
var x = fbt._(
  "A parameterized message to: {personName}",
  [fbt._param("personName", theName)],
  {
    hk: "2ArYIU",
  }
);

`;

exports[`Test declarative (jsx) fbt syntax translation should handle single expression with concentated strings 1`] = `
import { fbt } from "fbtee";
fbt._("foobar", null, {
  hk: "4l7JLw",
});

`;

exports[`Test declarative (jsx) fbt syntax translation should handle subject+reflexive pronouns 1`] = `
import { fbt } from "fbtee";
fbt._(
  {
    1: {
      1: "She wished herself a happy birthday.",
    },
    2: {
      2: "He wished himself a happy birthday.",
    },
    "*": {
      "*": "They wished themselves a happy birthday.",
    },
  },
  [
    fbt._pronoun(3, gender, {
      human: 1,
    }),
    fbt._pronoun(2, gender, {
      human: 1,
    }),
  ],
  {
    hk: "3hCKKE",
  }
);

`;

exports[`Test declarative (jsx) fbt syntax translation should handle template descriptions 1`] = `
import { fbt } from "fbtee";
fbt._("Here it is", null, {
  hk: "124XBa",
});

`;

exports[`Test declarative (jsx) fbt syntax translation should handle variations 1`] = `
import { fbt } from "fbtee";
var x = fbt._(
  {
    "*": "Click to see {count} links",
  },
  [fbt._param("count", c, [0])],
  {
    hk: "35KbmT",
  }
);

`;

exports[`Test declarative (jsx) fbt syntax translation should ignore __private attributes 1`] = `
import { fbt } from "fbtee";
fbt._("{foo}", [fbt._param("foo", foo)], {
  hk: "2kCEE7",
});

`;

exports[`Test declarative (jsx) fbt syntax translation should ignore non-expression children in fbt:param 1`] = `
import { fbt } from "fbtee";
fbt._("{foo}", [fbt._param("foo", foo)], {
  hk: "2kCEE7",
});

`;

exports[`Test declarative (jsx) fbt syntax translation should insert param value for same-param 1`] = `
import { fbt } from "fbtee";
fbt._("str {foo} and {foo}", [fbt._param("foo", Bar)], {
  hk: "4oznc3",
});

`;

exports[`Test declarative (jsx) fbt syntax translation should maintain order of params and enums 1`] = `
import { fbt } from "fbtee";
fbt._(
  {
    x: {
      "*": "Hello, {foo}x{bar}",
    },
    y: {
      "*": "Hello, {foo}y{bar}",
    },
  },
  [
    fbt._enum(x, {
      x: "x",
      y: "y",
    }),
    fbt._param("bar", bar, [0, n]),
    fbt._param("foo", foo),
  ],
  {
    hk: "jYMse",
  }
);

`;

exports[`Test declarative (jsx) fbt syntax translation should not insert extra space 1`] = `
import { fbt } from "fbtee";
fbt._("Hello, {guest}!", [fbt._param("guest", guest)], {
  hk: "21cLqh",
});

`;

exports[`Test declarative (jsx) fbt syntax translation should strip out more newlines 1`] = `
import { fbt } from "fbtee";
var x = fbt._("A simple string... with some other stuff.", null, {
  hk: "xpi1d",
});
baz();

`;

exports[`Test declarative (jsx) fbt syntax translation should strip out newlines 1`] = `
import { fbt } from "fbtee";
var x = fbt._("Preamble {parm}", [fbt._param("parm", blah)], {
  hk: "42eUy1",
});
baz();

`;

exports[`Test declarative (jsx) fbt syntax translation should support html escapes 1`] = `
import { fbt } from "fbtee";
fbt._("Ã—", null, {
  hk: "2jQoIS",
});

`;

exports[`Test declarative (jsx) fbt syntax translation should support non-breasking space character 1`] = `
import { fbt } from "fbtee";
fbt._("text with non-breakingÂ Â Â space", null, {
  hk: "1WqZ9A",
});

`;

exports[`Test declarative (jsx) fbt syntax translation should support unicode characters 1`] = `
import { fbt } from "fbtee";
// A backslash \\ in comments
fbt._(
  "A copyright sign Â©, a multi byte character ðŸ’©, and a backslash \\\\.",
  null,
  {
    hk: "4w0iJW",
  }
);

`;

exports[`Test declarative (jsx) fbt syntax translation should treat multiline descs as a single line 1`] = `
import { fbt } from "fbtee";
fbt._("lol", null, {
  hk: "1kGA01",
});

`;

exports[`Test declarative (jsx) fbt syntax translation should work with fragments 1`] = `
import { fbt } from "fbtee";
<Fragment>
  {fbt._(
    "{time} by {user name}",
    [
      fbt._param("time", formatDate(date, "F d, Y")),
      fbt._param(
        "user name",
        <Link
          href={{
            url: user.link,
          }}
        >
          {user.name}
        </Link>
      ),
    ],
    {
      hk: "1KGso4",
    }
  )}
</Fragment>;

`;

exports[`Test declarative (jsx) fbt syntax translation should work with implicit fragments 1`] = `
import { fbt } from "fbtee";
<>
  {fbt._(
    "{time} by {user name}",
    [
      fbt._param("time", formatDate(date, "F d, Y")),
      fbt._param(
        "user name",
        <Link
          href={{
            url: user.link,
          }}
        >
          {user.name}
        </Link>
      ),
    ],
    {
      hk: "1KGso4",
    }
  )}
</>;

`;

exports[`Test fbt transforms without the jsx transform [legacy buggy behavior] <fbt:pronoun> should insert a space character between two fbt constructs that don't neighbor raw text 1`] = `
import { fbt } from "fbtee";
fbt._(
  {
    "*": {
      "*": "You can add thesetags to anything.",
    },
    _1: {
      _1: "You can add this tag to anything.",
    },
  },
  [fbt._plural(count), fbt._plural(count)],
  {
    hk: "1kDgt0",
  }
);

`;

exports[`Test fbt transforms without the jsx transform nested in div 1`] = `
import { fbt } from "fbtee";
let x = (
  <div>
    {fbt._("A nested string", null, {
      hk: "2Z1yyy",
    })}
  </div>
);

`;

exports[`Test fbt transforms without the jsx transform not nested 1`] = `
import { fbt } from "fbtee";
let x = fbt._("A nested string", null, {
  hk: "2Z1yyy",
});

`;

exports[`Test fbt transforms without the jsx transform short bool syntax for doNotExtract attribute 1`] = `
import { fbt } from "fbtee";
let x = fbt._("Test", null, {
  hk: "2XNFBa",
});

`;

exports[`Test fbt transforms without the jsx transform short bool syntax for number attribute 1`] = `
import { fbt } from "fbtee";
let x = fbt._(
  {
    "*": "{name}",
  },
  [fbt._param("name", "name", [0])],
  {
    hk: "1SNt5t",
  }
);

`;

exports[`Test fbt transforms without the jsx transform should fail to preserve whitespace in text when preserveWhitespace=true (known bug) 1`] = `
import { fbt } from "fbtee";
fbt._("Some text with 3 spaces in between.", null, {
  hk: "3Uwc3D",
});

`;

exports[`Test fbt transforms without the jsx transform when using within template literals should dedupe plurals 1`] = `
import { fbt } from "fbtee";
fbt._(
  {
    "*": {
      "*": "There are {number} photos.",
    },
    _1: {
      _1: "There is 1 photo.",
    },
  },
  [fbt._plural(num), fbt._plural(num, "number", hi())],
  {
    hk: "2DWyfC",
  }
);

`;

exports[`Test fbt transforms without the jsx transform when using within template literals should work with a basic <fbt> 1`] = `
import { fbt } from "fbtee";
html\`<div>
  \${fbt._("basic text", null, {
    hk: "10IXnM",
  })}
</div>\`;

`;

exports[`Test fbt transforms without the jsx transform when using within template literals should work with a nested <fbt> within an <fbt:param> 1`] = `
import { fbt } from "fbtee";
html\`<div>
  \${fbt._(
    "outer text {param text}",
    [
      fbt._param(
        "param text",
        html\`<strong>
          \${fbt._(
            "inner text {inner param}",
            [fbt._param("inner param", "bold")],
            {
              hk: "koRSf",
            }
          )}
        </strong>\`
      ),
    ],
    {
      hk: "3keHFG",
    }
  )}
</div>\`;

`;

exports[`Test fbt transforms without the jsx transform when using within template literals should work with basic <fbt> auto-parameterization 1`] = `
import { fbt } from "fbtee";
html\`<div>
  \${fbt._(
    "outer text {=m1}",
    [
      fbt._implicitParam(
        "=m1",
        <strong>
          {fbt._("bold text", null, {
            hk: "3GKUYj",
          })}
        </strong>
      ),
    ],
    {
      hk: "4BN0aO",
    }
  )}
</div>\`;

`;
